<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiu.pw</id>
    <title>秀儿</title>
    <updated>2020-08-31T07:36:22.417Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiu.pw"/>
    <link rel="self" href="https://xiu.pw/atom.xml"/>
    <subtitle>知难而退</subtitle>
    <logo>https://xiu.pw/images/avatar.png</logo>
    <icon>https://xiu.pw/favicon.ico</icon>
    <rights>All rights reserved 2020, 秀儿</rights>
    <entry>
        <title type="html"><![CDATA[利用Microsoft 365 E5开发者订阅搭建自己的邮局|设置catch-all邮箱]]></title>
        <id>https://xiu.pw/gsDFY9Jro/</id>
        <link href="https://xiu.pw/gsDFY9Jro/">
        </link>
        <updated>2020-08-30T15:55:27.000Z</updated>
        <content type="html"><![CDATA[<p>最近看了几个服务器自建邮局的方案，很多程序服务器要求2G内存起步，搭建也比较复杂，还要各种设置避免进垃圾箱，是个技术活，害怕那步出问题搞的自己心态爆炸，感觉不太适合自己。想想还是第三方的好，之前我已经尝试过yandex/zoho/腾讯企业邮，最后选择了yandex，一直再使用感觉良好。前几天开发者试用的E5订阅又续订，于是就试了一下，设置邮局功能按照后台引导设置没有任何难度，主要是设置catch-all邮箱，这里分享一下过程。</p>
<p>提示：文中E5订阅是指开发者试用订阅，保持活跃能自动续费。网上有很多调用api保持活跃的方法，但是博主申请完一直没使用也续费了，如何才算活跃没有具体的说法。如果没有自动续费，订阅会被取消但是数据不是马上删除，会有时间可以迁移 。</p>
<p>（本文搭建邮局不是开发行为，只是正常使用。）</p>
<p><strong>catch-all邮箱</strong>：又叫全收邮件，就是把发给邮件服务器上不存在账户的邮件都重定向到某个邮箱，而不是直接退信。正常情况下，如发邮件给服务器上不存在的账户会直接退信给发件人。E5开发者订阅只用25用户，利用catch-all功能可以实现无限别名收邮件。</p>
<h1 id="一添加域名到microsoft-365">一，添加域名到Microsoft 365</h1>
<p>打开：https://admin.microsoft.com/Adminportal/Home?source=applauncher#/Domains<br>
添加并验证域名，前两步我就不截图了。</p>
<p><img src="http://blog.jialezi.net/admin/editor/php/upload/46231593341187.png" alt="" loading="lazy"><br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/74411593341187.png" alt="" loading="lazy"><br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/38461593341187.png" alt="" loading="lazy"><br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/77251593341187.png" alt="" loading="lazy"><br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/79951593341187.png" alt="" loading="lazy"></p>
<h1 id="二添加两个用户用于测试">二，添加两个用户用于测试</h1>
<p>添加用户：https://admin.microsoft.com/Adminportal/Home?source=applauncher#/users</p>
<p>添加了i@9mail.club和aaa@9mail.club</p>
<p><img src="http://blog.jialezi.net/admin/editor/php/upload/70031593341187.png" alt="" loading="lazy"><br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/25201593341187.png" alt="" loading="lazy"></p>
<h1 id="三向i9mailclub和i29mailclub不存在的用户发送邮件">三，向i@9mail.club和i2@9mail.club（不存在的用户）发送邮件</h1>
<p>可见i2@9mail.club是退信了。<br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/30121593341188.png" alt="" loading="lazy"><br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/81921593341188.png" alt="" loading="lazy"></p>
<h1 id="四设置catch-all功能">四，设置Catch-all功能。</h1>
<p>1）打开Exchange 管理中心：https://outlook.office365.com/ecp/</p>
<figure data-type="image" tabindex="1"><img src="http://blog.jialezi.net/admin/editor/php/upload/32321593341188.png" alt="" loading="lazy"></figure>
<p>2）修改域类型</p>
<p>邮件流——接受的域，把域类型改为内部中继。</p>
<p><img src="http://blog.jialezi.net/admin/editor/php/upload/48211593341188.png" alt="" loading="lazy"><br>
<img src="http://blog.jialezi.net/admin/editor/php/upload/86391593341188.png" alt="" loading="lazy"></p>
<p>3）创建一个动态通讯组，用于存放已有的用户。</p>
<p>收件人——组——新建Office 365组——动态通讯组列表——仅以下收件人类型——具有Exchange邮箱用户</p>
<p>（我这里动态通讯组名称设置为 exchange）</p>
<figure data-type="image" tabindex="2"><img src="http://blog.jialezi.net/admin/editor/php/upload/68331593341188.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="http://blog.jialezi.net/admin/editor/php/upload/63721593341188.png" alt="" loading="lazy"></figure>
<p>4）创建规则，用于把不存在有的邮件重定向到指定邮箱</p>
<p>邮件流——规则——创建新规则</p>
<p>名称:随意——规则：发件人位于 组织外部 ——执行：邮件重定向 指定邮箱（i@9mail.club）</p>
<p>除非：收件人为以下组成员 exchange（第三步设置的动态通讯组） PS：如果看不到除非选项，请滑动到底部点击下面的高级</p>
<figure data-type="image" tabindex="4"><img src="http://blog.jialezi.net/admin/editor/php/upload/35851593341188.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="http://blog.jialezi.net/admin/editor/php/upload/60301593341188.png" alt="" loading="lazy"></figure>
<h1 id="五测试">五，测试</h1>
<p>向aaa@9mail.club和xxx@9mail.club（不存在）发送邮件</p>
<p>aaa@9mail.club正常收到邮件</p>
<p>xxx@9mail.club的邮件重定向到了i@9mail.club</p>
<p>设置成功。</p>
<figure data-type="image" tabindex="6"><img src="http://blog.jialezi.net/admin/editor/php/upload/1401593341188.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="http://blog.jialezi.net/admin/editor/php/upload/14001593341189.png" alt="" loading="lazy"></figure>
<p>转自:<a href="http://blog.jialezi.net/?post=158" title="http://blog.jialezi.net/?post=158">http://blog.jialezi.net/?post=158</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Onedrive+OneManager+Heroku+CFWorkers免费的OD列表]]></title>
        <id>https://xiu.pw/KB2M1bDsU/</id>
        <link href="https://xiu.pw/KB2M1bDsU/">
        </link>
        <updated>2020-08-30T01:39:37.000Z</updated>
        <content type="html"><![CDATA[<p><strong>网站下载链接直接是xxx.com/abc.jpg，没有302跳到微软xxx.sharepoint.com，也没有反代xxx.sharepoint.com那样后面一长串。</strong></p>
<h1 id="准备工作">准备工作：</h1>
<p>1，        Onedrive，或Sharepoint<br>
这个大家有的，各种A1，E3，E5，世纪。（Sharepoint默认25T）<br>
2，        OneManager，Github地址：https://github.com/qkqpttgf/OneManager-php<br>
基于各种无服务器的平台，比如Heroku、腾讯SCF、阿里FC、华为FG、百度CFC，配置都保存在其环境变量中，当然也可以装在VPS与空间里，不过为了一致，程序不固定储存onedrive的目录结构，缓存最多1小时<br>
3，        Heroku，最好需要注册2个帐号，注册与登录时需要魔法，平时操作时不需要<br>
OneManager配置是保存在环境变量中的，所以不需要一直监控保活，Heroku免费套餐每月550小时，550小时/30天=18.33小时，每天只要访问时间段空出来24-18=6小时没有人访问，这一个月其实就足够使用了，但有些人的网站可能访问人比较多所以还没到月底就用光了。<br>
当然，heroku也可绑卡达到1000小时，同时还能自定义域名。但，SSL却比较麻烦。<br>
4，        CF workers，免费的就好</p>
<h1 id="部署程序-安装程序-绑定网盘">部署程序、安装程序、绑定网盘：</h1>
<p>1，        将OneManager一键部署到Heroku<br>
2，        访问给定的herokuapp域名，正式安装好程序<br>
3，        安装好后登录，在设置中绑定Onedrive或Sharepoint<br>
4，        在设置中做些设定<br>
5，        换一个Heroku帐号再安装一次（时长够用就无所谓）</p>
<h1 id="重点">重点：</h1>
<p><strong>在CF Workers中填入以下代码</strong></p>
<hr>
<pre><code>// 单日
const SingleDay = '111.herokuapp.com'
// 双日
const DoubleDay = '222.herokuapp.com'
// 一切给CF代理，true/false
const CFproxy = true

// 由于heroku不绑卡不能自定义域名，就算绑卡后https也不方便
// 另外免费套餐每月550小时，有些人不够用
// 于是在CF Workers使用此代码，分单双日拉取不同heroku帐号下的相同网页
// 只改上面，下面不用动

addEventListener('fetch', event =&gt; {
    let nd = new Date();
    if (nd.getDate()%2) {
        host = SingleDay
    } else {
        host = DoubleDay
    }
    if (!CFproxy) {
        let url=new URL(event.request.url);
        if (url.protocol == 'http:') {
            url.protocol = 'https:'
            response = Response.redirect(url.href);
            event.respondWith( response );
        } else {
            url.hostname=host;
            let request=new Request(url,event.request);
            event.respondWith( fetch(request) )
        }
    } else {
        event.respondWith( fetchAndApply(event.request) );
    }
})

async function fetchAndApply(request) {
    let response = null;
    let url = new URL(request.url);
    if (url.protocol == 'http:') {
        url.protocol = 'https:'
        response = Response.redirect(url.href);
        return response;
    }
    url.host = host;

    let method = request.method;
    let body = request.body;
    let request_headers = request.headers;
    let new_request_headers = new Headers(request_headers);

    new_request_headers.set('Host', url.host);
    new_request_headers.set('Referer', request.url);

    let original_response = await fetch(url.href, {
        method: method,
        body: body,
        headers: new_request_headers
    });

    response = new Response(original_response.body, {
        status: original_response.status,
        headers: original_response.headers
    })

    return response;
}
</code></pre>
<hr>
<p>单双日分别填入不同的heroku帐号下的网站（当然2个网站要设置得一模一样），这样每个heroku帐号每个月都只访问15或16天，就算24小时有人访问也才360或384小时。<br>
最后，给workers加上自定义域名的路由！</p>
<p>从头到尾都可以是Free的，不看网站页面，光从下载过程来看，可以完全假装CF套在了大盘鸡上,谁也看不出我没服务器。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[INFO-SPIDER 是一个帮助用户拿回自己的数据的爬虫工具箱]]></title>
        <id>https://xiu.pw/UM09GDy1m/</id>
        <link href="https://xiu.pw/UM09GDy1m/">
        </link>
        <updated>2020-08-29T13:14:31.000Z</updated>
        <content type="html"><![CDATA[<p><strong>一个神奇的工具箱，拿回你的个人信息。</strong></p>
<h1 id="what-is-info-spider">What is INFO-SPIDER</h1>
<p>INFO-SPIDER 是一个集众多数据源于一身的爬虫工具箱，旨在安全快捷的帮助用户拿回自己的数据，工具代码开源，流程透明。并提供数据分析功能，基于用户数据生成图表文件，使得用户更直观、深入了解自己的信息。 目前支持数据源包括GitHub、QQ邮箱、网易邮箱、阿里邮箱、新浪邮箱、Hotmail邮箱、Outlook邮箱、京东、淘宝、支付宝、中国移动、中国联通、中国电信、知乎、哔哩哔哩、网易云音乐、QQ好友、QQ群、生成朋友圈相册、浏览器浏览历史、12306、博客园、CSDN博客、开源中国博客、简书。</p>
<h1 id="features">Features</h1>
<p>安全可靠：本项目为开源项目，代码简洁，所有源码可见，本地运行，安全可靠。<br>
使用简单：提供 GUI 界面，只需点击所需获取的数据源并根据提示操作即可。<br>
结构清晰：本项目的所有数据源相互独立，可移植性高，所有爬虫脚本在项目的 Spiders 文件下。<br>
数据源丰富：本项目目前支持多达24+个数据源，持续更新。<br>
数据格式统一：爬取的所有数据都将存储为json格式。<br>
个人数据丰富：本项目将尽可能多地为你爬取个人数据，后期数据处理可根据需要删减。<br>
数据分析：本项目提供个人数据的可视化分析，目前仅部分支持。<br>
文档丰富：本项目包含完整全面的使用说明文档和视频教程</p>
<h1 id="quickstart">QuickStart</h1>
<h2 id="依赖安装">依赖安装</h2>
<p>安装python3和Chrome浏览器</p>
<p>安装与Chrome浏览器相同版本的<a href="http://chromedriver.storage.googleapis.com/index.html" title="驱动">驱动</a></p>
<p>安装依赖库 pip install -r requirements.txt</p>
<h2 id="工具运行">工具运行</h2>
<p>进入 tools 目录</p>
<p>运行 python3 main.py</p>
<p>在打开的窗口点击数据源按钮, 根据提示选择数据保存路径</p>
<p>弹出的浏览器输入用户密码后会自动开始爬取数据, 爬取完成浏览器会自动关闭.</p>
<p>在对应的目录下可以查看下载下来的数据(xxx.json), 数据分析图表(xxx.html)</p>
<h1 id="数据源">数据源</h1>
<p>GitHub<br>
QQ邮箱<br>
网易邮箱<br>
阿里邮箱<br>
新浪邮箱<br>
Hotmail邮箱<br>
Outlook邮箱<br>
京东<br>
淘宝<br>
支付宝<br>
中国移动<br>
中国联通<br>
中国电信<br>
知乎<br>
哔哩哔哩<br>
网易云音乐<br>
QQ好友<br>
QQ群<br>
生成朋友圈相册<br>
浏览器浏览历史<br>
12306<br>
博客园<br>
CSDN博客<br>
开源中国博客<br>
简书</p>
<h1 id="数据分析">数据分析</h1>
<p>博客园</p>
<p>CSDN博客</p>
<p>开源中国博客</p>
<p>简书</p>
<h1 id="计划">计划</h1>
<p>提供web界面操作，适应多平台</p>
<p>对爬取的个人数据进行统计分析</p>
<p>融合机器学习技术、自然语言处理技术等对数据深入分析</p>
<p>把分析结果绘制图表直观展示</p>
<p>添加更多数据源...</p>
<p>Visitors</p>
<h1 id="developers-want-to-say">Developers want to say</h1>
<ol>
<li>该项目解决了个人数据分散在各种各样的公司之间，经常形成数据孤岛，多维数据无法融合的痛点。</li>
<li>作者认为该项目的最大潜力在于能把多维数据进行融合并对个人数据进行分析，是个人数据效益最大化。</li>
<li>该项目使用爬虫手段获取数据，所以程序存在时效问题（需要持续维护，根据网站的更新做出修改）。</li>
<li>该项目的结构清晰，所有数据源相互独立，可移植性高，所有爬虫脚本在项目的Spiders文件下，可移植到你的程序中。</li>
<li>目前该项目v1.0版本仅在Windows平台上测试，Python 3.7，未适配多平台。</li>
<li>计划在v2.0版本对项目进行重构，提供web端操作与数据可视化，以适配多平台。</li>
<li><strong>本项目<a href="https://github.com/kangvcar/InfoSpider" title="INFO-SPIDER">INFO-SPIDER</a>代码已开源，欢迎star支持。</strong></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vps测速整合脚本]]></title>
        <id>https://xiu.pw/E-ilBDDMb/</id>
        <link href="https://xiu.pw/E-ilBDDMb/">
        </link>
        <updated>2020-08-27T12:24:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用方法">使用方法:</h1>
<pre><code class="language-bash">wget vpstest.cn/it &amp;&amp; bash it
</code></pre>
<p>或</p>
<pre><code class="language-bash">wget git.io/vpstest &amp;&amp; bash vpstest
</code></pre>
<p>或</p>
<pre><code class="language-bash">wget -O it vpstest.cn &amp;&amp; bash it
</code></pre>
<h1 id="效果图">效果图</h1>
<figure data-type="image" tabindex="1"><img src="https://s1.ax1x.com/2020/08/25/d2msj1.png" alt="" loading="lazy"></figure>
<pre><code>整合了
1. bench.sh
2. LemonBench
3. superspeed
4. superbench修复版
5. 91yuntest
6. ZBench
7. superbench修复+多节点版
8. UnixBench
9. GeekBench5
10.kos回程测试
11.超内存测试
12.sysbench测试---感谢云筏大佬的分享
路由测试
（注：脚本收集自互联网）
已修复kos测试
已更新删除残留文件
修复了一些已知bug
已经修复脚本4、7（有待测试）
请删除脚本残余文件
添加sysbench-cpu测试
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[监测IP是否被阻断]]></title>
        <id>https://xiu.pw/uxQvbeATH/</id>
        <link href="https://xiu.pw/uxQvbeATH/">
        </link>
        <updated>2020-08-27T12:19:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="监测ip是否被阻断">监测IP是否被阻断</h1>
<p>利用 PHP socket 去监测指定 域名/IP 的 TCP 和 ICMP 是否开放.</p>
<p>请开启 exec() 函数.</p>
<p>测试环境为:宝塔面板 PHP7.0+ nginx1.15</p>
<p>请安装 PHP socket 扩展(宝塔面板默认是安装的),否则无法使用哦</p>
<pre><code>已知问题在Linux下 socket 检测 icmp,会没有权限.现只能用 exec() 函数
</code></pre>
<h1 id="部署方法">部署方法</h1>
<p>把 check.php 分别放到国内服务器和国外服务器.</p>
<p>修改 index.html 的GET 请求地址即可.<br>
<img src="https://mjj.today/temp/1910/ec034efc07983847.png" alt="" loading="lazy"></p>
<h1 id="预览">预览</h1>
<figure data-type="image" tabindex="1"><img src="https://cdn.u1.huluxia.com/g3/M01/E9/0A/wKgBOV2b8heARHU7AAAvxkpyM1M813.png" alt="" loading="lazy"></figure>
<h1 id="项目地址"><a href="https://gitee.com/KIENG_S/jianchaipshifouzuduan" title="项目地址">项目地址</a></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Github Action定时重启IBM cloud foundry]]></title>
        <id>https://xiu.pw/ZfBq1liZd/</id>
        <link href="https://xiu.pw/ZfBq1liZd/">
        </link>
        <updated>2020-08-26T06:26:20.000Z</updated>
        <content type="html"><![CDATA[<p><strong>本文简单介绍了Github Action的用法，并使用Gihub Action定时重启IBM cloud foundry容器。</strong></p>
<h1 id="摘要">摘要</h1>
<p><strong>GitHub Actions是GitHub自家的持续集成及自动化工作流服务，它使用起来非常简单，只要在你的仓库根目录建立.github/workflows文件夹，将你的工作流配置(YML文件)放到这个目录下，就能启用GitHub Actions服务。</strong></p>
<h1 id="关键字">关键字</h1>
<p><strong>Github Action，IBM cloud foundry</strong></p>
<h1 id="yml配置文件">yml配置文件</h1>
<pre><code class="language-php">name: IBM Cloud Auto Restart

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * *'      # 根据自己的需要设置何时重启

jobs:
  ibm-cloud-restart:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Init
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo &quot;deb https://packages.cloudfoundry.org/debian stable main&quot; | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install cf-cli
    - name: Login IBM Cloud
      env:
        IBM_ACCOUNT: ${{ secrets.IBM_ACCOUNT }}
        IBM_PASSWORD: ${{ secrets.IBM_PASSWORD }}
      run: |
        cf login -a https://api.us-south.cf.cloud.ibm.com -u $IBM_ACCOUNT &lt;&lt; EOF
        $IBM_PASSWORD
        EOF
    - name: Get IBM Cloud Apps
      run: |
        cf a
    - name: Restart IBM Cloud
      env:
        IBM_APP_NAME: ${{ secrets.IBM_APP_NAME }}
      run: |
        cf restart $IBM_APP_NAME
</code></pre>
<h1 id="使用方法">使用方法</h1>
<p>fork仓库：https://github.com/wf09/IBMWorkflow</p>
<h1 id="设置环境变量">设置环境变量</h1>
<pre><code>IBM_ACCOUNT：账户邮箱

IBM_APP_NAME：app的名字

IBM_PASSWORD：密码
</code></pre>
<p><strong>设置完环境变量以后记得commit一下yml文件触发Action。</strong></p>
<h1 id="效果图">效果图</h1>
<figure data-type="image" tabindex="1"><img src="https://ftp.fly97.cn/image/image-20200827193322808.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BT 一键脚本]]></title>
        <id>https://xiu.pw/2Zg9OkH6z/</id>
        <link href="https://xiu.pw/2Zg9OkH6z/">
        </link>
        <updated>2020-08-23T08:34:31.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://www.moec.top/wp-content/uploads/2020/08/1598170539-b984e330f41792e6.png" alt="" loading="lazy"></figure>
<h1 id="请提前安装curl">请提前安装curl</h1>
<h1 id="一键变傻">一键变傻</h1>
<pre><code class="language-java">wget https://raw.githubusercontent.com/laoxong/lxongOther/master/Bash/bt.sh | bash

sh bt.sh
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[魔法上网业成本内幕揭秘]]></title>
        <id>https://xiu.pw/qOGDU8Zke/</id>
        <link href="https://xiu.pw/qOGDU8Zke/">
        </link>
        <updated>2020-08-18T11:22:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前提概要">前提概要</h1>
<p>这几年，人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾越来越凸显</p>
<p>人民日益增长的上网需求需要和不平衡不充分的出入境国际带宽的矛盾也越来越凸显</p>
<p>加上功夫网的大力打击封锁，以L2TP为首的旧版虚拟专用网和以酸酸为首的新虚拟专用网程序被识别+大力打击封锁</p>
<p>越来越多人开始使用由某些无证非法经营的国际联网业务，我们一般称之为鸡场</p>
<p>国际联网，由于某些不可描述的原因，常常需要使用一些不可描述的工具，简称魔法上网，可以访问一些被咔嚓的违法网站</p>
<p>而在这其中，有某些商家是拥有合法牌照，但是大部分相关业者都是无牌无证非法经营</p>
<p>近期，全国各地都展开了新一轮净网行动，大量无牌无证非法经营业者被喝茶处罚</p>
<p>技术相关，肯定是一般人学不会，也很难在短时间内让人理解的</p>
<p>但是魔法上网的成本，却是一团雾，蒙在小白的眼前，从而打信息不对称来牟取不当的非法利益</p>
<p>本文要旨不是建议/推广使用个人经营或者其他方法的魔法上网服务</p>
<p>只是揭露行业成本内幕</p>
<p>为了您的生命健康安全和人身自由，请使用合法渠道对境外联网</p>
<p>由于目前国际形势恶化，大部分线路都是采用国内中转国外的多机流玩法</p>
<h1 id="常用境外服务器">常用境外服务器</h1>
<p>魔法上网业，常用的商家（境外服务器）如下</p>
<h2 id="微软azure">微软Azure</h2>
<p>AZ是目前最最主流的团伙作案工具</p>
<p>当然，没几个业者会正价购买服务</p>
<p>首先需要知道原价是多少</p>
<h3 id="az流量价格">AZ流量价格</h3>
<p>$120/T （香港/新加坡/日本/韩国等）</p>
<p>$87/T （美国英国等）</p>
<p>另外还有德国瑞士等地区，但是基本没人用，但是基本在100刀/T的价格波动</p>
<p>常用的渠道有各种订阅，一个号可以免费开2台机器</p>
<h3 id="az订阅套餐价格">AZ订阅套餐价格</h3>
<p>AZ100：来自学生订阅，一般不可欠费，有效期1年，市场价约20-80</p>
<p>AZ200：来自常规体验订阅，通常可欠费，魔法主力，有效期1个月，市场价约30-80</p>
<p>AZ3500：来自企业商务订阅，通常不可欠费，魔法主力，有效期1年，市场价约为1000-1800</p>
<p>AZ7000：AZ3500升级版，比较少见</p>
<h3 id="为什么选择az">为什么选择AZ</h3>
<p>作为世界上最值钱的公司之一，财大气粗的微软，网络质量，机器稳定都是上好，机器带宽大于1G</p>
<p>而广东移动-香港AZ是目前最主流的线路，成本低速度快，同时速度稳，不受高峰期而有明显差距</p>
<p>同时还有多地区可选，常用的地区都有，包括新加坡韩国日本美国等等，但是值得注意的是，都不是原生IP</p>
<h2 id="亚马逊aws">亚马逊AWS</h2>
<p>作为巨头之一的亚马逊，自然也不输微软</p>
<p>目前来说，AWS主要是有2种，一种轻量，一个常规的云服务器</p>
<p>AWS的产品线就比较多了</p>
<p>首先轻量，正价购买即可，最常用的是日本，联通-日本AWS也是品质一流的线路</p>
<p>其次云服务器，一般有月抛机和代金券两种玩法</p>
<p>月抛机主要是小馒头和大厂云为首的商家，具体怎么月抛，这个就是商业机密，不便描述</p>
<p>总之大体价格为10-15R/月，可选日本香港等地区，机器带宽大于1G，流量不限</p>
<p>AWS的部分低配机有限速到250M左右好像</p>
<p>代金券就是类似之前AZ的各种订阅，主要是骗企业使用，开发使用来获得，常见的有40刀，100刀，1000刀等等</p>
<p>大体换算价格相当于1刀=1.4-2人民币</p>
<p>具体流量费用我就研究不多，可以自行去官网查阅，目前一般都用月抛而不是代金券了</p>
<p>不过，值得一提的是，AWS近期还有一种十分强大的东西，就是AGA</p>
<p>AGA对于电信用户非常友好，速度和延迟都是秒天秒地的水平</p>
<p>各种大小月抛卖家也打起他们的主意，但是由于近期的滥用和风控收紧</p>
<p>价格波动和稳定性也差距很大，无法给出比较合适的参考值</p>
<h3 id="谷歌云gcp">谷歌云GCP</h3>
<p>谷歌作为巨头之一，本身实力也很强劲</p>
<p>主要撸点就是300刀了（约大陆1T流量）</p>
<p>之前是一年有效，近期改为3个月有效</p>
<p>由于流量少，一般作为个人用，不适合团伙作案</p>
<h3 id="vultr">Vultr</h3>
<p>作为VPS业的大厂，主要活动是免费1个月的100刀体验，成本约5/10美元</p>
<p>主要机器价格为5刀/月-1T流量</p>
<p>不清楚玩VU的玩不玩欠费</p>
<p>月抛机器一般单机价格为10块钱/月左右</p>
<p>VU的日本和美西对联通比较友好</p>
<h3 id="do">DO</h3>
<p>作为VLD三兄弟之一的DO，大部分网络质量都不行（到大陆）</p>
<p>唯一可行的就是新加坡DO-移动商宽了</p>
<p>主要玩法是5刀然后体验2个月的100刀，或者使用GitHub学生包，有效期1年50刀</p>
<p>主要机器价格为5刀/月-1T流量</p>
<p>还有个优点是共享流量池</p>
<h3 id="linode">Linode</h3>
<p>作为VLD三兄弟之一的Linode</p>
<p>撸法价格都差不多</p>
<p>主要节点也是日本美西，跟VU比较相近，不过多描述</p>
<p>也是共享流量池</p>
<h3 id="hinet">Hinet</h3>
<p>台湾本土运营商</p>
<p>一般用的都是分销小鸡，包含VDSVPSNAT等</p>
<p>Hinet的典型特征就是5/600M无限流量</p>
<p>同时起步价比较高</p>
<p>也有商宽家宽之分</p>
<p>最近也有“月抛”</p>
<p>大体价格为200-400块钱单人车</p>
<p>主要用途是台湾原生IP，解锁流媒体</p>
<p>得益于无限流量，你懂的</p>
<p>当然也有些商家卖的是有限流量的</p>
<h3 id="hkt">HKT</h3>
<p>香港本土运营商</p>
<p>一般用的都是分销小鸡，包含VDSVPSNAT等</p>
<p>HKT的典型特征就是无限流量</p>
<p>口子有小到一两百的，也有G口</p>
<p>同时起步价比较高</p>
<p>也有商宽家宽之分</p>
<p>大体价格为400-1000块钱单人车</p>
<p>主要用途是香港原生IP，解锁流媒体</p>
<p>得益于无限流量，你懂的</p>
<p>当然也有些商家卖的是有限流量的</p>
<p>以一篇不知名的商家在7月15日的广告为例：</p>
<p>HKT VDS 家宽打机<br>
8 vCPU Cores<br>
8G RAM<br>
32G SSD<br>
1Gbps 峰值带宽<br>
无限制流量</p>
<p>家庭宽频 附带打机神线<br>
Proxmox控制面板<br>
DHCP动态ip<br>
测试IP 203.218.243.1/42.3.54.1<br>
手动开通，付款后24小时内交付</p>
<p>优惠码 10OFF</p>
<p>950￥/月 折后855￥/月</p>
<h2 id="阿里云">阿里云</h2>
<p>被称为套路云，阿里曾经的新手套餐，电信是GIA线路</p>
<p>主要特征是30M，流量为TB级</p>
<p>香港7刀1T，新加坡是2.5刀</p>
<p>目前已经没了</p>
<p>只剩下轻量服务器</p>
<p>也是30M，价格为24块钱一个月左右</p>
<p>电信联通去程日本NTT回程联通，移动直连</p>
<p>个人感觉还行，但是基本没人用了</p>
<h2 id="腾讯云">腾讯云</h2>
<p>阿里云的继任者，被称为良心云</p>
<p>最近也出了轻量服务器</p>
<p>更牛逼的是香港新加坡硅谷都是电信GIA</p>
<p>同时代理还能8折，原价起步24r</p>
<p>也是30M+流量TB级</p>
<p>同时解锁功能也很强</p>
<p>但是要求实名，导致很多团伙没上车</p>
<h2 id="俄罗斯机器">俄罗斯机器</h2>
<p>还有很多俄罗斯机器包括Gcore，JustHost等等</p>
<p>主要是联通使用，速度一般，价格一般</p>
<h2 id="gia机器">GIA机器</h2>
<p>主要有搬瓦工，安畅，CERA等大厂和水墨云，桔子数据等国人商家运营</p>
<p>大部分都是价格较高，一般仅个人使用，基本没见团伙使用</p>
<h1 id="常用国内服务器">常用国内服务器</h1>
<h2 id="广东移动">广东移动</h2>
<p>广东移动是目前最主流最强大的国内机器，和东南亚互联极强，其他地区也不差</p>
<p>常见商家包括百度云加速，碳云，修罗云</p>
<p>常用地区包括广州，深圳，佛山，中山等</p>
<p>常用线路包括东南方向的香港新加坡AZ，新加坡DO，新加坡Linode，香港HKT，台湾Hinet等等</p>
<p>以修罗云为例，一篇7.20的广告如下：</p>
<p>广州移动VDS</p>
<p>2 vCpus<br>
2GB 内存<br>
15 GB SSD<br>
300 Mbps 峰值带宽<br>
10TB 单向流量<br>
1 IPv4 - 移动<br>
广州移动<br>
人工审核后开通<br>
提供基础保修服务<br>
赠送一个手动快照</p>
<p>月付352元，优惠码：hello-gz</p>
<p>可以估算出大体价格为35块钱/T（单向计算）</p>
<p>【不同商家和产品价格差距不同】</p>
<h2 id="东部联通">东部联通</h2>
<p>作为老牌出境大哥，东部联通在俄罗斯日本美国台湾方向都很强大</p>
<p>常用地区包括宿迁，镇江，枣庄等</p>
<p>联通的商家就很多了</p>
<p>以Hostmsu为例</p>
<p>江苏宿迁-联通500M（血赚版）PLUS</p>
<p>核心：1vCPU<br>
内存：256MB<br>
硬盘：5GB SSD<br>
IP：1IPv4位址（共享）<br>
流量：1.5T 单向流量<br>
端口转发数：21个（自选，预设一个SSH端口）<br>
带宽：500Mbps<br>
机房：江苏宿迁</p>
<p>价格为35R/月</p>
<p>可以估算出大体价格为23块钱/T（单向计算）</p>
<p>【不同商家和产品价格差距不同】</p>
<h2 id="电信cn2">电信CN2</h2>
<p>本地CN2可以强拉其他各种机器走5943精品网络</p>
<p>号称垃圾拯救机</p>
<p>但是成本高昂</p>
<p>常用地区包括上海，厦门，泉州</p>
<p>常见商家包括修罗云，碳云，PQS，小伞云等</p>
<p>以修罗云在6月2日的一篇广告为例：</p>
<p>上海CN2，现货</p>
<p>9折优惠码：shcn2</p>
<p>SH-CN2-1C05 共享IP<br>
vCPU：1<br>
内存：512 MB<br>
空间：6 GB<br>
流量：1000 GB / 月（70 Mbps上传 / 200Mbps下载，单向计算）<br>
IPv4：共享，11个转发端口<br>
80元/月</p>
<p>可以估算出大体价格为80块钱/T（单向计算）</p>
<p>【不同商家和产品价格差距不同】</p>
<h2 id="vds">VDS</h2>
<p>实际上，根据经验，常规小鸡中转成本在30元左右（CN2为80左右）</p>
<p>但是这个是流量计费的小鸡，还有一些大流量（甚至无限)的VDS</p>
<p>或者是高速流量多少后限速</p>
<p>以碳云的8月2日的一篇广告为例：</p>
<p>CoalCloud 郑州-联通 新品上线<br>
郑州-中原数据中心 联通国内九大基地之一<br>
百度云郑州节点同段<br>
测试IP：42.236.89.1</p>
<p>VDS套餐2:郑州-联通 VDS 500M<br>
CPU:4 vCPU|E5-2678v3<br>
内存:4 GB|DDR4<br>
硬盘:20 GB|SSD<br>
地址:IPv4*1<br>
流量:40 TB|峰值流量<br>
带宽:500 Mbps<br>
月付:768元</p>
<p>（峰值流量是高速流量的意思，达量限速）</p>
<p>可以估算出大体价格为19块钱/T（单向计算）</p>
<p>【不同商家和产品价格差距不同】</p>
<p>成本一下子就下去了，同时还能超了继续用</p>
<h2 id="线路组成">线路组成</h2>
<p>说完了国内外机器，大家也知道机器一般都是国内外多机器组成线路</p>
<p>为什么是多机器而不是双机器，这是因为有叠加中转的玩法</p>
<ul>
<li>
<p>中转叠加（链式中转）<br>
举个例子</p>
<p>广州移动-香港AZ，广州移动-台湾Hinet就是双机组合</p>
<p>但是，这种组建法，如果台湾hinet用广州移动中转效果不好，那就会很影响效果</p>
<p>为此，很多人使用了多机组合：广州移动-香港AZ-台湾Hinet</p>
<p>这样就通过强大的AZ移动出境，然后用AZ连海外</p>
<p>众所周知海外的互联都很OK，所以你懂的</p>
</li>
<li>
<p>中转复用<br>
由于成本原因，很多商家用一台机器中转多机器，会导致受到中转共用影响明显，比如抢带宽，断流丢包加剧，中转升天死一群，但是看上去节点多</p>
</li>
<li>
<p>落地复用<br>
由于成本原因，很多商家用多台机器中转一个机器，会导致受到中转共用影响明显，比如抢带宽，断流丢包加剧，落地升天死一群，但是看上去节点多</p>
</li>
<li>
<p>双重复用<br>
落地+中转都复用，经常死一群，但是看上去节点多</p>
</li>
</ul>
<h3 id="自营成本">自营成本</h3>
<p>部分小白可能好奇自营成本</p>
<p>大体来说，广东移动在6-8R/M，各地联通大约是4R/M，个别贫困地区冲业绩可能更便宜，还有卖家宽摸鱼的</p>
<h3 id="gia">GIA</h3>
<p>香港CN2GIA，80刀/M，新加坡日本韩国CN2GIA，40刀/M，美西CN2GIA，6-8刀/M</p>
<p>什么是GIA，什么是CN2，5943和CN2GT又是什么请自行搜索</p>
<p>个人认为判断是不是GIA请看走不走南京CN2，总有沙雕喜欢追究有没有20297</p>
<h3 id="iplciepl">IPLC/IEPL</h3>
<p>这玩意，水很深，大体意思就是不走传统公网，常用渠道包括阿里内网，运营商直购，还有各级分销</p>
<p>这个玩意跟传销一样，层层分销压迫，你转手次数越多，价格越高，质量越差，但资质要求越低</p>
<p>有的人成本25R/M，有的人可能要花400R/M</p>
<p>总之优点是不走传统公网，延迟低，不丢包，常用于打游戏，但是成本较高（但是没CN2GIA贵）</p>
<p>来源(Source)：<a href="https://blog.000714.xyz/202008/2204.html" title="苍穹の下">苍穹の下</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一键安装可以使用浏览器访问的Linux桌面环境]]></title>
        <id>https://xiu.pw/9oEjY-emU/</id>
        <link href="https://xiu.pw/9oEjY-emU/">
        </link>
        <updated>2020-08-16T15:46:48.000Z</updated>
        <content type="html"><![CDATA[<p>今天，我们来介绍一下我自己写的一个一键shell脚本。使用此脚本，您可以在您的Linux服务器上一键搭建一个可以随时随地用浏览器访问的Linux桌面环境，让您便捷地管理服务器。</p>
<p><a href="https://github.com/Har-Kuun/OneClickDesktop/" title="Github项目地址">Github项目地址</a> 欢迎大家星星叉叉</p>
<h1 id="1-脚本特色">1, 脚本特色</h1>
<p>从源码编译安装Guacamole服务器<br>
配置Guacamole Web APP<br>
安装Tomcat 9, TigerVNC, XFCE4桌面环境，火狐浏览器<br>
一键安装配置Let’s Encrypt安全证书，开启OCSP装订<br>
安装Nginx反代Tomcat<br>
安装完毕后，您可以使用任意浏览器访问远程桌面，无需再使用VNC客户端</p>
<h1 id="2-安装系统需求">2, 安装系统需求</h1>
<p>目前，本程序仅支持在Ubuntu 18.04/20.04 LTS以及Debian 10的64位操作系统上运行。您的服务器或者VPS最好是全新安装的系统，不带LAMP/LEMP等组件或cPanel/DirectAdmin/宝塔等用户面板。</p>
<p>您的服务器需要有外网IP地址。在安装之前，您需要解析一个域名（可以用三级域名或者一个免费域名）到您的服务器上。安装桌面环境需要至少1 GB的内存。</p>
<h1 id="3-安装教程">3, 安装教程</h1>
<p>您可以使用sudo权限用户或root用户(不建议)登录服务器SSH，然后执行下面的命令即可。</p>
<p>英文版：</p>
<pre><code>wget https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop.sh &amp;&amp; sudo bash OneClickDesktop.sh
</code></pre>
<p>中文版：</p>
<pre><code>wget https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop_zh-CN.sh &amp;&amp; sudo bash OneClickDesktop_zh-CN.sh
</code></pre>
<p>程序将自动安装需要的各部分组件，并引导您设置用户名，密码以及域名。</p>
<p>如果安装过程中有报错，您可以检查同目录下的OneClickDesktop.log日志文件。同时建议您在这里留言汇报一下错误信息，或者在Github上提交issue, 这样我就可以即时更新脚本，修复问题。</p>
<p>4, 安装示例<br>
安装好后，我们可以可以直接从浏览器里访问服务器上搭建的桌面程序，如下图。</p>
<figure data-type="image" tabindex="1"><img src="https://qing.su/wp-content/uploads/2020/08/browser-1-1024x560.png" alt="" loading="lazy"></figure>
<p>综上，使用OneClickDesktop一键脚本，您可以自由方便地在Linux服务器上搭建随时随地用浏览器即可访问的桌面环境，让您便捷地管理您的Linux服务器，无需再使用繁琐的命令行。</p>
<p>作者为香菇肥牛，<a href="https://qing.su/article/oneclick-desktop.html" title="原文链接">原文链接</a></p>
<p><strong>注1：添加中文支持</strong><br>
1, 重新配置系统locales</p>
<pre><code>sudo dpkg-reconfigure locales
</code></pre>
<p>2, 安装亚洲语言包</p>
<pre><code>sudo apt-get install language-pack-ja language-pack-zh* language-pack-ko
sudo apt-get install japan* chinese* korean*
</code></pre>
<p>3, 安装亚洲语言字体</p>
<pre><code>sudo apt-get install fonts-arphic-ukai fonts-arphic-uming fonts-ipafont-mincho fonts-ipafon</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何正确使用17ce对WordPress进行压力测试]]></title>
        <id>https://xiu.pw/w1QhXJg1k/</id>
        <link href="https://xiu.pw/w1QhXJg1k/">
        </link>
        <updated>2020-08-16T15:41:19.000Z</updated>
        <content type="html"><![CDATA[<p>大家都知道，17ce.com是非常有名的测速网站。它在全国及世界其他地区拥有数百个测速节点，用户提交测速请求后，17ce就会并发地在这些节点上向待测的网址发送web请求。利用它的高并发性，我们可以用它来测试自己网站的压力响应能力。今天，就来介绍一下如何采用正确的姿势来对WordPress进行压力测试，避免缓存以及UA过滤等因素的影响。</p>
<h1 id="1-绕过wordpress缓存">1, 绕过WordPress缓存</h1>
<p>如果您直接使用17ce来测试WordPress的首页或者某个文章页面，那么大概率无法起到压力测试的效果，原因是大部分WordPress都会安装缓存，使得网站以静态的方式响应给前端，几乎没有数据库查询与CPU消耗。因此，如果要正确进行压力测试，则需要绕过WordPress缓存。</p>
<p>一个比较方便的方法是在WordPress链接后面加上?s=xxx小尾巴，比如https://example.com/?s=656j9f86y.  这个链接的作用是用GET方式搜索WordPress的内容。由于搜索内容没有办法被缓存，因此每一个节点的相应都会产生数据库查询。我们测试了一个随手搭建的测试站，发现测试这个搜索链接之后，产生了很多502响应。</p>
<figure data-type="image" tabindex="1"><img src="https://qing.su/wp-content/uploads/2020/06/1-w-1.png" alt="" loading="lazy"></figure>
<p>类似地，您还可以对您的WordPress的登录页/wp-login.php构造post请求来测试。</p>
<h1 id="2-绕过ua判断">2, 绕过UA判断</h1>
<p>如果您的网站屏蔽了17ce的User Agent, 那么采用默认的设置就无法测试了。您可以看一下测试结果，如果网站响应状态那里都是“下载时间异常”，但是响应时间都很短（小于1秒），那说明您的网站屏蔽了17ce的User Agent.  我们可以修改UA来绕过UA判断。</p>
<p>在测试页面，点击右边Advanced, 然后下边找到User agent, 输入自定义的UA, 比如我们随便输一个Chrome的。</p>
<p>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</p>
<figure data-type="image" tabindex="2"><img src="https://qing.su/wp-content/uploads/2020/06/2-w-1.png" alt="" loading="lazy"></figure>
<h1 id="3-关于typecho">3, 关于Typecho</h1>
<p>Typecho和WordPress类似，只要构造一个搜索链接即可进行测试。Typecho的搜索链接格式为https://example.com/search/xxxxx 如果您使用的是Typecho, 则在17ce上提交这样的地址即可做到压力测试。</p>
<p>作者为香菇肥牛，<a href="https://qing.su/article/162.html" title="原文链接">原文链接</a></p>
]]></content>
    </entry>
</feed>