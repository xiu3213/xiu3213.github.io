<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiu3213.github.io</id>
    <title>秀儿</title>
    <updated>2020-08-10T04:07:40.741Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiu3213.github.io"/>
    <link rel="self" href="https://xiu3213.github.io/atom.xml"/>
    <subtitle>知难而退</subtitle>
    <logo>https://xiu3213.github.io/images/avatar.png</logo>
    <icon>https://xiu3213.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 秀儿</rights>
    <entry>
        <title type="html"><![CDATA[一键制作DDWin，批处理!]]></title>
        <id>https://xiu3213.github.io/s9y925myV/</id>
        <link href="https://xiu3213.github.io/s9y925myV/">
        </link>
        <updated>2020-08-09T14:30:40.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://xiu3213.github.io/post-images/1596983474950.png" alt="" loading="lazy"></figure>
<p>makeddwin 工具包，使用批处理制作，代码明文，以及在包里写明依赖文件来自那里，你完全可以替换，代码查阅。</p>
<p>不会还有杠精来喷吧？要不你写个更好的来？<br>
至于你用上报毒与我无关！</p>
<p>说明：<br>
【使用前，请把所需的文件放进相应文件夹！】<br>
目录结构：<br>
bin 文件夹，存放用来制作的依赖程序和文件。<br>
iso 文件夹，存放Windows ISO 系统镜像(只能放1个)<br>
packages 文件夹，存放Windows 补丁文件<br>
driver 文件夹，存放其他驱动文件<br>
virtio 文件夹，存放KVM virtio ISO 驱动镜像(只能放1个)<br>
vhd 文件夹，存放 .vhd格式 虚拟硬盘(只能放1个)<br>
export 文件夹，输出生成的.gz、.wim、和解压的.vhd文件。<br>
注意，只能放一个的目录务必按要求，因为放多个会导致脚本无法判断。</p>
<p>步骤1：使用vhd.cmd批处理，生成一个大小20-30G左右的虚拟硬盘<br>
生成后的虚拟硬盘文件会在vhd目录，虚拟硬盘大小视你安装系统后硬盘体积还剩多少。<br>
一般安装系统后，虚拟硬盘最低要剩空闲有1G左右，后期可以再创建对应体积的虚拟硬盘作调整。</p>
<p>步骤2：使用install.cmd批处理，选择刚才创建的已挂载的虚拟硬盘分区，自行查看[我的电脑]，你虚拟硬盘生成多少G的分区，就选择那个分区，进行下一步安装系统等其他操作。</p>
<p>步骤3：使用dd.cmd批处理，对已经完成制作的.vhd虚拟硬盘文件进行压缩成可DD的文件或者wim文件。<br>
压缩完成后，别忘了测试文件的完整性检查，否则是一个损坏的数据文件是无法使用的！<br>
生成的.gz文件，可以在Linux系统下DD为此系统。<br>
生成的.wim文件，可以在WinPE中安装到实体机系统，又或者添加生成为一个iso文件。<br>
(注意，压缩比较慢通常是1-3小时，电脑配置越高越快！)</p>
<p>网址：nat.ee<br>
批处理：荣耀&amp;制作<br>
本批处理工具仅适合Windows 7 sp1 以上的系统使用！<br>
注意：不能放在带有空格路径的目录，否则出错。<br>
TG交流群：https://t.me/dd_win<br>
如在使用中有任何问题或者建议，欢迎加入交流。</p>
<p>下载链接：https://yyingc.lanzous.com/i72Wzfei7ba<br>
视频教程下载：https://yyingc.lanzous.com/igExyfesota</p>
<p>视频教程：https://www.youtube.com/watch?v=LTVgPFWnnX8<br>
哔哩哔哩：https://www.bilibili.com/video/BV1Pk4y1U7Zp/</p>
<p>转自:https://www.hostloc.com/thread-728111-1-1.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义 git.io 短链接地址与绕过链接生成限制]]></title>
        <id>https://xiu3213.github.io/MH86KLzkf/</id>
        <link href="https://xiu3213.github.io/MH86KLzkf/">
        </link>
        <updated>2020-08-08T14:39:16.000Z</updated>
        <content type="html"><![CDATA[<p>Github 提供了 Git.io 短网址服务，用于缩短 Github 上项目的网址。</p>
<p>官方文档：https://github.com/blog/985-git-io-github-url-shortener</p>
<p>自定义短链接<br>
依据官方文档，生成短链接有两个参数</p>
<p>| 参数名  | 参数值  | 是否必须  |<br>
|  url	源 | URL 链接  | 是  |<br>
|  code | 自定义短链  |  否 |</p>
<p>命令模板<br>
<code>curl -i &quot;https://git.io&quot; -F &quot;url=长链接&quot; -F &quot;code=短链接&quot;</code><br>
使用示例</p>
<pre><code>$ curl -i &quot;https://git.io&quot; -F &quot;url=https://github.com/baoyun-site&quot; -F &quot;code=baoyunsite&quot;
HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Tue, 14 Jul 2020 08:22:52 GMT
Status: 201 Created
Content-Type: text/html;charset=utf-8
Location: https://git.io/baoyunsite
Content-Length: 30
X-Xss-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.026588
X-Node: 7fa64432-805f-49cf-a4d4-6f19c50ae8f3
X-Revision: 392798d237fc1aa5cd55cada10d2945773e741a8
Strict-Transport-Security: max-age=31536000; includeSubDomains
Via: 1.1 vegur$ curl -i &quot;https://git.io&quot; -F &quot;url=https://github.com/baoyun-site&quot; -F &quot;code=baoyunsite&quot;
HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Tue, 14 Jul 2020 08:22:52 GMT
Status: 201 Created
Content-Type: text/html;charset=utf-8
Location: https://git.io/baoyunsite
Content-Length: 30
X-Xss-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.026588
X-Node: 7fa64432-805f-49cf-a4d4-6f19c50ae8f3
X-Revision: 392798d237fc1aa5cd55cada10d2945773e741a8
Strict-Transport-Security: max-age=31536000; includeSubDomains
Via: 1.1 vegur
</code></pre>
<p>https://github.com/baoyun-site<br>
绕过链接生成限制<br>
原理<br>
通过使用 Github Pages 中放置静态页面的功能，来进行跳转。</p>
<p>实现<br>
请查看 Github 仓库 renbaoshuo/git.io ，内含代码与说明。</p>
<p>版权声明<br>
本文作者： 宝硕<br>
本文链接： https://baoshuo.blog/post/oKnaKLcDb/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【gd-utils】 Docker快速搭建GoogleDrive转存Bot  ]]></title>
        <id>https://xiu3213.github.io/S2lYVWimz/</id>
        <link href="https://xiu3213.github.io/S2lYVWimz/">
        </link>
        <updated>2020-08-08T01:30:52.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://xiu3213.github.io/post-images/1596850275326.gif" alt="" loading="lazy"></figure>
<p>如果只能搭建bot推荐使用docker版</p>
<p>准备：<br>
1.SA配置文件（xxx.json）此步骤忽略参考（http://blog.jialezi.net/?post=153 ）<br>
2.tgbot的api t.me/BotFather 创建即可见<br>
3.一个可解析的域名<br>
4.GoogleDrive文件夹的id<br>
5.docker镜像<br>
（我自用的小修改版 https://hub.docker.com/r/jialezi/gd-utils）<br>
原版：https://github.com/gdtool/gd-utils-docker/</p>
<p>搭建<br>
示例：<br>
域名为abc.com<br>
GoogleDrive文件夹的id为1hhDZw2SKjNeuwWroHSenoY-TXiFZyDoM<br>
bot api为13xxxx2380:AAGDPL_2-LPIA0iQ6RxxxxM9bBOFjtErFGE</p>
<p>提前解析abc.com到你的服务器ip（用于申请ssl）<br>
然后</p>
<p>1.下载配置文件，按要求修改里面的参数</p>
<pre><code>`wget https://raw.githubusercontent.com/gdtool/gd-utils-docker/master/config.example.js -O config.js`
##用SA的修改以下三项即可，其他按需修改
const DEFAULT_TARGET = '' ,// 必填，拷贝默认目的地ID，如果不指定target，则会复制到此处，建议填写团队盘ID
tg_token: '', // 你的 telegram robot 的 token，获取方法参见 https://core.telegram.org/bots#6-botfather
tg_whitelist: [''] // 你的tg username(t.me/username)，bot只会执行这个列表里的用户所发送的指令
</code></pre>
<p>2.创建sa文件夹上传sa文件到sa文件夹（你也可以运行后再用web端的filebrowser上传）</p>
<p>3.运行</p>
<pre><code>docker run --restart=always -idt -e USERPWD=123qwe -p 443:443 -p 80:80 -e Domain=abc.com -v ${PWD}/sa:/gd-utils/sa -v ${PWD}/config.js:/gd-utils/config.js --name gd-utils jialezi/gd-utils
</code></pre>
<p>申请ssl需要80端口<br>
USERPWD为shellinabox密码 || Domain=abc.com 为自己域名，要提前解析，由caddy自动申请ssl</p>
<p>4.对接telegram bot</p>
<pre><code>curl -F &quot;url=[YOUR_WEBSITE]/api/gdurl/tgbot&quot; 'https://api.telegram.org/bot[YOUR_BOT_TOKEN]/setWebhook'
</code></pre>
<p>例如：</p>
<pre><code>curl -F &quot;url=https://abc.com/api/gdurl/tgbot&quot; 'https://api.telegram.org/bot1394xxx380:AAGDPL_2-LPIA0iQ6xxxxM9bBOFjtErFGE/setWebhook'
</code></pre>
<p>返回true ok</p>
<p>访问:</p>
<p>1）https://abc.com #gd-utils地址</p>
<p>2）https://abc.com/shell #shellinabox地址，使用root需要先使用gd用登录，再切换root<br>
账号gd，密码自设 USERPWD=123qwe || su root切换到root 密码自设 USERPWD=123qwe</p>
<p>3）https://abc.com/file #filebrowser 账号密码admin</p>
<p>如果觉得不够快，可以去使用fclone，超级暴力的项目</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[bbr/bbrplus/bbr2/锐速内核安装脚本更新测试版]]></title>
        <id>https://xiu3213.github.io/yzEb8qOIh/</id>
        <link href="https://xiu3213.github.io/yzEb8qOIh/">
        </link>
        <updated>2020-08-08T01:26:13.000Z</updated>
        <content type="html"><![CDATA[<p>方便国内使用<br>
不卸载内核<br>
<code>wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</code><br>
或<br>
<code>wget -N &quot;https://github.000060000.xyz/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</code><br>
卸载内核<br>
<code>wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code><br>
或<br>
<code>wget -N &quot;https://github.000060000.xyz/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code></p>
<p>bbr内核更新为5.5/5.4</p>
<p>bbrplus降级到4.14.129 安装方法和安装的内核均和原作者一致 彻底甩锅<br>
维持原来的支持版本 不再支持c6,c8;debian和ubuntu各版本安装问题和我无关</p>
<p>不支持32位系统<br>
锐速内核稍微更新</p>
<p>去掉魔改版 增加xanmod 5.5.1版本<br>
xanmod 只添加了centos7,8 debian9,10</p>
<p>5.5内核支持cake队列 5.4未测试</p>
<p>测试版本，建议先用不卸载内核版本测试，然后再用正常版本<br>
不卸载内核表示不会去卸载现有的内核</p>
<p>测试分支<br>
https://github.com/ylx2016/Linux-NetSpeed/tree/2020.2.3<br>
https://github.com/ylx2016/Linux-NetSpeed/releases</p>
<p>原作者<br>
https://github.com/cx9208/Linux-NetSpeed<br>
https://github.com/chiakge/Linux-NetSpeed</p>
<figure data-type="image" tabindex="1"><img src="https://xiu3213.github.io/post-images/1596850093008.webp" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tg邀请码机器人源码 自动发码 数量统计 无码提醒]]></title>
        <id>https://xiu3213.github.io/NbSNPnGXz/</id>
        <link href="https://xiu3213.github.io/NbSNPnGXz/">
        </link>
        <updated>2020-08-08T01:12:06.000Z</updated>
        <content type="html"><![CDATA[<p>简介<br>
因为论坛和部分网站需要发送邀请码邀请注册，人工发码又太慢，于是想到tg机器人发码，但是找了很多项目都没有找到类似的开源项目，偶然间看到了teelebot开源的tgAPi框架 于是参考着示例 ，用我学了半个月的半吊子python 写出了这个暂时能用不会报错的telegram邀请码机器人</p>
<p>目前已经到我理想状态，短期内不会进行功能更新，学习比较重要。</p>
<p>增加功能<br>
1.邀请码自动发码模块 并且限制领取数量（邀请码添加在invite_code目录下的code.txt 一行一个） 用户信息存储在usertext.txt文件内</p>
<p>2.邀请码数量统计，如果邀请码用完自动给管理员发消息（需自行修改len_invite.py里面的发送id）</p>
<p>3.补码模块已经添加 目前并不是很理想的状态但是可以用使用方法</p>
<p>/add_code邀请码<br>
邀请码<br>
注意：一行一个注意换行</p>
<p>4.删除用户信息模块，删除后用户可以再次获取邀请码指令/del用户id目前只能删除单个用户</p>
<p>5.mps的自动补码模块 请在/plugins/updatacode/updatacode.py文件内填写网站登录信息，目前只会抓取两页邀请码，需要手动更新，后期会添加自动执行进去。</p>
<p>开发计划<br>
1.增加管理员添加邀请码模块</p>
<p>2.多类邀请码模块支持</p>
<p>3.统计需改成json数据 目前统计方式过于简易(已完成)</p>
<p>4.管理员补码：暂定计划1，发送补码指令并跟随邀请码，格式为一行一个，然后剔除指令文本，后使用write写入code.txt文件中。 计划2:用户发送指令后开始监听，将用户发送的后续文本写入文件中，需发送特定指令来结束输入</p>
<p>环境要求<br>
Python版本<br>
teelebot 只支持 Python3.x，不支持Python2.x。</p>
<p>使用<br>
一、源码运行<br>
1.克隆或点击下载本项目到本地，保证本机安装有Python3.x版本和包requests（删除了多余模块不需要了）；</p>
<p>2.config.cfg 配置文件</p>
<p>配置文件格式:</p>
<p>[config]<br>
key=your key<br>
root=your user id<br>
debug=False<br>
timeout=60<br>
plugin_dir=your plugin dir   //[Optional]<br>
Linux<br>
在 /root 目录下创建文件夹 .teelebot ,并在其内新建配置文件 config.cfg ,按照上面的格式填写配置文件</p>
<p>Windows<br>
在 C:\Users&lt;username&gt; 目录下创建文件夹 .teelebot ,并在其内新建配置文件 config.cfg ,按照上面的格式填写配置文件</p>
<p>指定配置文件<br>
Linux 和 Windows 都可在命令行通过参数手动指定配置文件路径，命令格式：</p>
<p>python -m teelebot -c/-C <configure file path><br>
路径必须为绝对路径。</p>
<p>3.运行</p>
<p>终端下进入teelebot文件夹所在目录。</p>
<p>对于使用程序配置文件默认路径的：输入python -m teelebot 回车,正常情况下你应该能看见屏幕提示机器人开始运行。<br>
对于命令行手动指定配置文件路径的：输入python -m teelebot -c/-C <configure file path> 回车,正常情况下你应该能看见屏幕提示机器人开始运行。<br>
tg邀请码机器人源码 自动发码 数量统计 无码提醒</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为Onedrive套上CDN加速下载]]></title>
        <id>https://xiu3213.github.io/G7OkD-Cag/</id>
        <link href="https://xiu3213.github.io/G7OkD-Cag/">
        </link>
        <updated>2020-08-08T01:10:25.000Z</updated>
        <content type="html"><![CDATA[<p>首先推荐两种程序</p>
<p>1.php的OneIndex修改版</p>
<p>2.萌咖的GO版OneList</p>
<p>这两种程序都能够直接将sharepoint域名替换为你反代的域名或者是CDN域名</p>
<p>程序地址：</p>
<p>OneIndex：https://github.com/caippx/oneindex-j</p>
<p>OneList：https://github.com/MoeClub/OneList/tree/master/Rewrite</p>
<p>使用方法<br>
OneList：</p>
<p>这个就很简单了，根据github中的教程 配置好配置文件之后</p>
<p>在运行的时候使用</p>
<p>OneList -bind 0.0.0.0 -port 80 -P &quot;xxxxx-my.sharepoint.com|domain.com&quot;<br>
即可将你的sharepoint域名替换成domain.con</p>
<p>OneIndex：</p>
<p>这个版本是经过我修改的版本，在安装完成之后 直接在后台设置里面可以看到替换sharepoint域名的选项</p>
<p>填上即可 如果留空 则不使用该功能</p>
<p>注：sharepoint域名为你在网页版onedrive首页时的那个域名xxxxx-my.sharepoint.com</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何反代-加速OneDrive域名]]></title>
        <id>https://xiu3213.github.io/CZWvLVqdV/</id>
        <link href="https://xiu3213.github.io/CZWvLVqdV/">
        </link>
        <updated>2020-08-08T01:08:28.000Z</updated>
        <content type="html"><![CDATA[<p>反代OneDrive域名<br>
利用Caddy反代OneDrive<br>
Caddy安装方法请自行搜索</p>
<p>domain.com {<br>
tls admin@domain.com<br>
timeouts none<br>
gzip<br>
proxy / https://xxx-my.sharepoint.com {<br>
header_upstream Host xxx-my.sharepoint.com<br>
header_upstream Referer https://xxx-my.sharepoint.com<br>
header_upstream -X-Forwarded-For {remote}<br>
header_upstream X-Real-IP {remote}<br>
header_upstream User-Agent {&gt;User-Agent}<br>
header_upstream Accept-Encoding identity<br>
}</p>
<p>写入如下配置<br>
重启caddy然后按照上一篇文章运行onelist或者修改oneindex配置即可</p>
<p>用CDN加速OneDrive<br>
本文只介绍nodecache 其他CDN 操作基本差不多</p>
<figure data-type="image" tabindex="1"><img src="https://xiu3213.github.io/post-images/1596848948187.jpg" alt="" loading="lazy"></figure>
<p>像上面这样填写点击确认创建并修改加速域名cname至nodecache生成的xxxxxxxxx.ncname.com域名</p>
<p>之后选择回源管理，将回源HOST 修改为xxx-my.sharepoint.com （必须</p>
<p>再到HTTPS 栏 添加加速域名的SSL证书</p>
<p>然后隐身模式访问加速域名 如果跳转到office登录页面 则说明成功</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用Actions每天自动使用Rclone调用OneDrive使Office E5订阅保持活跃]]></title>
        <id>https://xiu3213.github.io/ppkASNJMF/</id>
        <link href="https://xiu3213.github.io/ppkASNJMF/">
        </link>
        <updated>2020-08-08T00:56:41.000Z</updated>
        <content type="html"><![CDATA[<p>注：E5保活皆是玄学，能不能成功谁能知道呢？</p>
<p>使用方法<br>
零、打开Github项目地址<br>
https://github.com/peng4740/E5-Rclone-Actions</p>
<p>一、Fork此仓库<br>
<img src="https://xiu3213.github.io/post-images/1596848323726.png" alt="" loading="lazy"></p>
<p>二、设置Rclone配置<br>
添加名为RCLONE_CONFIG的变量<br>
值为Rclone的配置，需要你本地先生成配置，之后打开Rclone配置文件复制出OneDrive的配置<br>
配置最前面的[od]需要改成<a href="%22od%22%E6%98%AF%E5%9C%A8%E7%94%A8Rclone%E6%B7%BB%E5%8A%A0OneDrive%E6%97%B6%E8%AE%BE%E7%BD%AE%E7%9A%84">e5</a><br>
<img src="https://xiu3213.github.io/post-images/1596848342263.png" alt="" loading="lazy"></p>
<p>三、启用Actions<br>
如图所示开启Actions，之后再对你自己Fork后的仓库点击Star(不要漏看了这一句)<br>
<img src="https://xiu3213.github.io/post-images/1596848354441.png" alt="" loading="lazy"><br>
<img src="https://xiu3213.github.io/post-images/1596848373311.png" alt="" loading="lazy"></p>
<p>四、查看运行结果<br>
Actions &gt; E5-Rclone-Actions</p>
<p>五、Rclone使用自己的API<br>
不长篇大论一大堆了，只提基本的几个点</p>
<p>到Azure新注册一个应用：https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade</p>
<p>名称：随意<br>
重定向URI：http://localhost</p>
<p>创建完成的页面(概述)可以看到Client_ID，也就是应用程序(客户端)ID，记录下来</p>
<p>到API权限页面添加权限：Files.Read、Files.ReadWrite、Files.Read.All、Files.ReadWrite.All、offline_access、User.Read</p>
<p>到证书和密码页面，添加客户端密码，一年还是长期，都可以。这个就是Client_secret，也要记录下来</p>
<p>rclone config添加配置时，填写自己的Client_ID和Client_secret按提示操作即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Telegram 本地消息防撤回插件]]></title>
        <id>https://xiu3213.github.io/PVphxlRBy/</id>
        <link href="https://xiu3213.github.io/PVphxlRBy/">
        </link>
        <updated>2020-08-07T03:34:05.000Z</updated>
        <content type="html"><![CDATA[<p>🔍 预览</p>
<p><img src="https://xiu3213.github.io/post-images/1596771304759.gif" alt="" loading="lazy"><br>
✨ 特性<br>
阻止本地消息被服务器撤回。<br>
被撤回的消息将被标记上 “已删除” 。<br>
插件具有极好的兼容性。<br>
标记的内容支持多语言自动识别。<br>
目前已支持自动识别：<br>
英语、简体中文语、繁体中文语、日语、韩语<br>
🍅 兼容性<br>
目前仅兼容 Windows Telegram v1.9.0 ~ v2.2.0 或更高。<br>
如果您正在使用 Telegram beta，请下载最新预览版本。</p>
<p>🍔 用法<br>
1.前往 发行页面 下载最新版本插件。<br>
2.关闭正在运行的 Telegram 进程。<br>
3.复制 version.dll 文件到 Telegram 根目录。<br>
4.运行 Telegram 程序。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSH 密钥一键配置脚本 使用教程]]></title>
        <id>https://xiu3213.github.io/bkZunUpHG/</id>
        <link href="https://xiu3213.github.io/bkZunUpHG/">
        </link>
        <updated>2020-08-07T02:07:14.000Z</updated>
        <content type="html"><![CDATA[<p>前言<br>
对于新入手或重装后的 VPS 配置密钥登录需要创建 ~/.ssh 目录、把公钥写入到 ~/.ssh/authorized_keys、设置权限、禁用密码登录等操作，虽然都是很简单的基础操作，但过程麻烦且枯燥：</p>
<pre><code>mkdir -p ~/.ssh
curl -fsSL https://github.com/P3TERX.keys &gt;&gt; ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
sudo sed -i &quot;s@.*\(PasswordAuthentication \).*@\1no@&quot; /etc/ssh/sshd_config
sudo service sshd restart
</code></pre>
<p>SSH 密钥一键配置脚本是一套用于简化 SSH 密钥配置过程的解决方案。使用它以上操作只需要一行命令：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -g P3TERX -d</code><br>
语法及选项说明<br>
bash &lt;(curl -fsSL git.io/key.sh) [选项...] &lt;参数&gt;<br>
-o – 覆盖模式，必须写在最前面才会生效<br>
-g – 从 GitHub 获取公钥，参数为 GitHub 用户名<br>
-u – 从 URL 获取公钥，参数为 URL<br>
-l – 从本地文件获取公钥，参数为本地文件路径<br>
-p – 修改 SSH 端口，参数为端口号<br>
-d – 禁用密码登录<br>
使用方法<br>
生成 SSH 密钥对<br>
如果没有密钥需要先生成，执行以下命令后一路回车即可。</p>
<p><code>ssh-keygen -t ecdsa -b 521</code><br>
TIPS： 此方法适用于 Win­dows 10 (1803后)的 Pow­er­Shell 或 WSL，Linux 发行版和 ma­cOS 自带的终端，但不仅限于这些环境。科普： 521 位的 ECDSA 密钥比起 RSA 密钥更安全且验证速度更快。</p>
<p>操作完后会在 ~/.ssh 目录中生两个密钥文件，id_ecdsa 为私钥，id_ecdsa.pub 为公钥。公钥就是我们需要安装在远程主机上的。</p>
<p>科普：~符号代表用户主目录，俗称家目录。其路径与当前登陆的用户有关，在 Linux 中普通用户家目录的路径是/home/用户名，而 root 用户是/root。Win­dowd 10 中路径是C:\Users\用户名。在 ma­cOS 中路径是/Users/用户名。</p>
<p>安装公钥<br>
从 GitHub 获取公钥<br>
在 GitHub 密钥管理页面 添加公钥，比如我的用户名是 P3TERX，那么在主机上输入以下命令即可：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -g P3TERX</code><br>
从 URL 获取公钥<br>
把公钥上传到网盘，通过网盘链接获取公钥：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -u https://p3terx.com/key.pub</code><br>
从本地文件获取公钥<br>
通过 FTP 的方式把公钥传到 VPS 上，然后指定公钥路径：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -f ~/key.pub</code><br>
覆盖模式<br>
使用覆盖模式（-o）将覆盖 /.ssh/authorized_keys 文件，之前的密钥会被完全替换掉，选项必须写在最前面才会生效，比如：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -o -g P3TERX</code><br>
或者</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -og P3TERX</code><br>
禁用密码登录<br>
在确定使用密钥能正常登录后禁用密码登录：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -d</code><br>
修改 SSH 端口<br>
把 SSH 端口修改为 2222：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -p 2222</code><br>
一键操作<br>
安装密钥、修改端口、禁用密码登录一键操作：</p>
<p><code>bash &lt;(curl -fsSL git.io/key.sh) -og P3TERX -p 2222 -d</code></p>
]]></content>
    </entry>
</feed>