<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiu.pw</id>
    <title>秀儿</title>
    <updated>2020-11-11T05:17:28.936Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiu.pw"/>
    <link rel="self" href="https://xiu.pw/atom.xml"/>
    <subtitle>知难而退</subtitle>
    <logo>https://xiu.pw/images/avatar.png</logo>
    <icon>https://xiu.pw/favicon.ico</icon>
    <rights>All rights reserved 2020, 秀儿</rights>
    <entry>
        <title type="html"><![CDATA[TSP & Trojan-Go / V2Ray 容器化管理部署脚本]]></title>
        <id>https://xiu.pw/HHRC2cOcg/</id>
        <link href="https://xiu.pw/HHRC2cOcg/">
        </link>
        <updated>2020-11-08T10:39:08.000Z</updated>
        <content type="html"><![CDATA[<p>基于 Docker 容器架构的 Trojan-Go/VLESS/VMess-TCP/WS-TLS 分流部署&amp;管理脚本</p>
<p>本方案采用 TSP 进行 TLS 前置分流，后端使用 Trojan-Go、V2Ray 容器与 WatchTower、Portainer 维护组件配合，实现快速部署、易用易维护的极致体验。</p>
<p>特别提示 在脚本部署过程中，除引用必要的官方源外，其他所有配置操作、数据处理皆为本地执行，无任何外部连接参与数据交换。</p>
<h1 id="使用简介">使用简介</h1>
<h4 id="安装-wget当检测到已经安装时会跳过请继续执行第二步">安装 Wget（当检测到已经安装时，会跳过，请继续执行第二步）</h4>
<p>Centos 7+</p>
<pre><code class="language-bash">command -v wget &gt;/dev/null 2&gt;&amp;1 || sudo yum -y install wget
</code></pre>
<p>Debian 9+ | Ubuntu 16+</p>
<pre><code class="language-bash">command -v wget &gt;/dev/null 2&gt;&amp;1 || sudo apt -y install wget
</code></pre>
<h4 id="下载并执行脚本">下载并执行脚本</h4>
<pre><code class="language-bash">wget -N --no-check-certificate -q https://cdn.jsdelivr.net/gh/h31105/trojan_v2_docker_onekey/deploy.sh &amp;&amp; \
chmod +x deploy.sh &amp;&amp; bash deploy.sh
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://kcdn.ltyuanfang.cn/yun/79/5fab6d7c3ba01CLSUFF1.png" alt="" loading="lazy"></figure>
<h1 id="协议-cdn-及客户端支持状况">协议、CDN 及客户端支持状况</h1>
<figure data-type="image" tabindex="2"><img src="https://kcdn.ltyuanfang.cn/yun/79/5fab6d8e57110CLSUFF2.png" alt="" loading="lazy"></figure>
<h1 id="部署建议">部署建议</h1>
<ul>
<li>
<p>TLS-Shunt-Proxy 负责证书全自动管理和网站服务（HTTPS 默认 443 HTTP 80 自动跳转）</p>
</li>
<li>
<p>Trojan-Go 容器化部署 (支持 WebSocket)</p>
</li>
<li>
<p>V2Ray 容器化部署（VLESS/VMess 协议）</p>
</li>
<li>
<p>容器的镜像由 WatchTower 监控并自动更新（建议安装）</p>
</li>
<li>
<p>*WatchTower 无需额外配置，已配置为自动更新容器并清理过期镜像</p>
</li>
<li>
<p>Portainer 基于 Web 的 Docker 管理服务（可选）</p>
</li>
<li>
<p>*Portainer 安装后，请尽快访问管理地址设置管理帐号和密码。HTTP://ServerDomainName:9080 （非 HTTPS）</p>
</li>
<li>
<p>由于 TSP 的 SNI 分流特性，若需配置 CDN 建议使用 A 记录方式，CNAME 方式不被支持。</p>
</li>
<li>
<p>CDN 配置：域名 -- A 记录 --&gt; VPS IP #这里的域名与脚本部署时填写的 TLS 域名相同</p>
</li>
</ul>
<p><strong>注意 本脚本为单用户配置，部署后可以自行按需修改代理配置文件内容，但修改后不要使用脚本菜单中的修改选项，否则将会重置相关配置信息。</strong></p>
<p><strong>注意 请根据部署情况调整开启防火墙端口，例如 HTTP 80、9080 及 HTTPS 443 端口。</strong></p>
<h1 id="开启-cdn-加速需要注意">开启 CDN 加速需要注意</h1>
<ol>
<li>
<p>仅需在直连线路状况不太理想的情况下开启，否则开启 CDN 并不一定会带来加速效果。仅需在直连线路状况不太理想的情况下开启，否则开启 CDN 并不一定会带来加速效果。</p>
</li>
<li>
<p>CDN 加速开启后，TSP 所管理的证书可能无法完成自动续签，应对办法：</p>
</li>
</ol>
<p>*请在证书过期前 30 天内，手动暂停 CDN 加速后重启 TSP 完成证书续签。</p>
<pre><code class="language-bash">#重启 TSP 触发证书续签
systemctl restart tls-shunt-proxy
#查看日志，观察证书续签结果
journalctl -u tls-shunt-proxy.service --since today
</code></pre>
<p>*如果您的域名解析服务支持分线路设置 DNS 记录（例如 Aliyun、DNSpod），可通过设置境外线路解析为 VPS IP，其他线路解析为 CDN 记录来解决此问题。</p>
<ol>
<li>由于 CDN 仅支持 加速 WebSocket 模式代理，在开启 CDN 加速后，为确保所有模式代理均可正常使用，客户端需要根据脚本生成的配置信息做相应调整。</li>
</ol>
<p>通过客户端服务器地址的不同配置，来控制是否通过 CDN 加速：</p>
<p>*TCP 模式代理客户端（不通过 CDN 加速）服务器地址 (ServerAddress) 设置为VPS IP 地址 或 任意指向该 IP 地址的域名（其他配置不变）</p>
<p>*WebSocket 模式代理客户端（通过 CDN 加速）服务器地址 (ServerAddress) 设置为域名 或 任意支持 Anycast 的 CDN 节点 IP（其他配置不变）</p>
<h1 id="日志查看">日志查看</h1>
<h3 id="tls-shunt-proxy-日志查看">TLS-Shunt-Proxy 日志查看</h3>
<pre><code class="language-bash">查看所有日志：
journalctl -u tls-shunt-proxy.service

查看当天日志：
journalctl -u tls-shunt-proxy.service --since today
</code></pre>
<h3 id="容器日志查看">容器日志查看</h3>
<pre><code class="language-bash">查看 Trojan-Go 日志

最近 30 分钟日志：
docker logs --since 30m Trojan-Go


查看 V2Ray 日志

最近 100 行日志：
docker logs --tail=100 V2Ray


查看 WatchTower 日志

指定时间后日志：
docker logs --since=&quot;2020-09-01T10:10:00&quot; WatchTower


查看 Portainer 日志

指定时间段日志：
docker logs --since=&quot;2020-09-05T10:10:00&quot; --until &quot;2020-09-05T12:00:00&quot; Portainer
</code></pre>
<h1 id="自定义配置以及容器重启">自定义配置以及容器重启</h1>
<p>在某些情况下，我们可能需要自定义修改代理配置文件（非脚本方式修改配置），我们需要在修改后，重启代理容器使配置生效。</p>
<p>例如：重启 V2Ray 容器：docker restart V2Ray</p>
<p>注意 请确认您对 TLS-Shunt-Proxy 以及 Trojan-Go/V2Ray 代理的配置方式、工作原理足够了解，否则不要自定义修改相关配置文件。</p>
<h1 id="配置文件">配置文件</h1>
<ul>
<li>WebSite：/home/wwwroot/</li>
<li>TLS-Shunt-Proxy：/etc/tls-shunt-proxy/config.yaml</li>
<li>Trojan-Go：/etc/trojan-go/config.json</li>
<li>V2Ray：/etc/v2ray/config.json</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[哪吒面板：小鸡们的最佳探针]]></title>
        <id>https://xiu.pw/9fOCL0iHG/</id>
        <link href="https://xiu.pw/9fOCL0iHG/">
        </link>
        <updated>2020-10-25T00:30:21.000Z</updated>
        <content type="html"><![CDATA[<p>哪吒开源探针：https://github.com/p14yground/nezha</p>
<p>演示地址：https://ops.naibahq.com/</p>
<p>探针分为dashboard面板和agent客户端，只需要简单编译即可获得。</p>
<p>安装编译所需依赖：</p>
<pre><code class="language-bash">yum -y install wget git gcc make
</code></pre>
<p>安装go编译环境：</p>
<pre><code class="language-bash">wget https://golang.org/dl/go1.15.3.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.15.3.linux-amd64.tar.gz
echo “export PATH=$PATH:/usr/local/go/bin” &gt;&gt;/etc/profile
source /etc/profile
</code></pre>
<p>编译dashboard：</p>
<pre><code class="language-bash">git clone https://github.com/p14yground/nezha.git
cd nezha
go mod tidy -v
go build cmd/dashboard/main.go
</code></pre>
<p>然后主目录会生成一个main的可执行文件，在/root下创建两个目录用于存放编译好的dashboard和agent，并把编译好的dashboard移动到对应目录。</p>
<pre><code class="language-bash">mkdir -p /root/{dashboard,agent}
mv main /root/dashboard/
</code></pre>
<p>编译agent，一句话就好了，生成的二进制文件也移动到agent目录方便以后直接用：</p>
<pre><code class="language-bash">go build cmd/agent/main.go
mv main /root/agent/agent
</code></pre>
<p>编写dashboard配置文件：</p>
<pre><code class="language-bash">cp -ra resource /root/dashboard/
mkdir /root/dashboard/data/
vi /root/dashboard/data/config.yaml
debug: true
httpport: 80
github:
admin:
– 7113412 #github id
clientid: e34j4bjk34h34vh42k #创建OAuth Apps获取
clientsecret: ea28bbe4e4jk34b34vdsa9b3b4hk4d5 ##创建OAuth Apps获取
site:
brand: 监控面板名称
cookiename: tulong #Cookie 名
</code></pre>
<p>其中github id、clientid和clientsecret需要在GitHub获取，具体方法如下：</p>
<p>在设置中找到oauth apps创建一个新的应用：<br>
<img src="https://www.zhujizixun.com/wp-content/uploads/2020/10/oauth-1024x460.png" alt="" loading="lazy"></p>
<p>填写站点名称和URL信息：<br>
<img src="https://www.zhujizixun.com/wp-content/uploads/2020/10/regapps-1024x623.png" alt="" loading="lazy"></p>
<p>复制头像url地址，在地址中获取github的id：<br>
<img src="https://www.zhujizixun.com/wp-content/uploads/2020/10/getgithubid-1024x578.png" alt="" loading="lazy"></p>
<p>复制client id和client secret：<br>
<img src="https://www.zhujizixun.com/wp-content/uploads/2020/10/getclientid-1024x568.png" alt="" loading="lazy"></p>
<p>配置完毕后，启动监控面板，然后用github账号登陆即可。</p>
<pre><code class="language-bash">cd /root/dashboard/
./main
</code></pre>
<p>启动后访问自己配置的域名和端口，登录github账号然后添加需要监控的服务器，这里我们就以监控本机为例：<br>
<img src="https://www.zhujizixun.com/wp-content/uploads/2020/10/addserver-1024x570.png" alt="" loading="lazy"></p>
<p>记录下面板生成的ID和密钥：<br>
<img src="https://www.zhujizixun.com/wp-content/uploads/2020/10/mainkey-1024x478.png" alt="" loading="lazy"></p>
<p>然后我们运行agent，-i参数接面板上生成的id，-p参数接密钥即可：</p>
<pre><code class="language-bash">cd /root/agent/
./agent -i 2 -s localhost:5555 -p 52a1c9abbe -d
</code></pre>
<p>然后我们来看看效果，很赞有木有：<br>
<img src="https://www.zhujizixun.com/wp-content/uploads/2020/10/showus-1024x559.png" alt="" loading="lazy"></p>
<p>这个探针没有复杂的配置，要监控其他小鸡直接把编译好的agent文件复制过去运行就行了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宝塔5.9开心版 原理与脚本]]></title>
        <id>https://xiu.pw/TRwY3drs5/</id>
        <link href="https://xiu.pw/TRwY3drs5/">
        </link>
        <updated>2020-10-14T01:37:35.000Z</updated>
        <content type="html"><![CDATA[<p><em>如果不想看过程、原理，直接到最底下的一键脚本</em></p>
<h1 id="方法1">方法1</h1>
<p>安装bt5.9</p>
<pre><code class="language-bash">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; echo y | sh install.sh
</code></pre>
<p>升级到专业版</p>
<pre><code class="language-bash">wget -O update.sh http://download.bt.cn/install/update_pro.sh &amp;&amp; bash update.sh pro
</code></pre>
<p>开心</p>
<pre><code class="language-bash">&gt;/www/server/panel/data/userInfo.json
/etc/init.d/bt restart
</code></pre>
<p>反正就这样就可以装付费插件了，到期时间显示当天</p>
<figure data-type="image" tabindex="1"><img src="https://developer-forum-online.cdn.bcebos.com/cb360baf-7b8d-49d3-b8a5-03a082efb6c6.png" alt="" loading="lazy"></figure>
<h1 id="方法2">方法2</h1>
<pre><code>还有一种方法(方法2)，先正常安装5.9.2专业版，然后用5.9.0的common.py替换5.9.2的，再按照网上流传的修改方法(164行修改为[data = {'status' : True,'msg' : {'endtime' : 32503651199 }};])
</code></pre>
<p>安装bt5.9</p>
<pre><code class="language-bash">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; echo y | sh install.sh
</code></pre>
<p>升级到专业版</p>
<pre><code class="language-bash">wget -O update.sh http://download.bt.cn/install/update_pro.sh &amp;&amp; bash update.sh pro
</code></pre>
<pre><code class="language-bash">替换common.py
cd /www/server &amp;&amp; cp -r panel panel-bak
wget http://download.bt.cn/install/update/LinuxPanel-5.9.0_pro.zip
unzip -o LinuxPanel-5.9.0_pro.zip panel/class/common.py
rm -f LinuxPanel-5.9.0_pro.zip
</code></pre>
<p>开心</p>
<pre><code class="language-bash">sed -i &quot;s/data = panelAuth.panelAuth().get_order_status(None);/data = {'status' : True,'msg' : {'endtime' : 32503651199 }};/&quot; /www/server/panel/class/common.py
&gt;/www/server/panel/data/userInfo.json
/etc/init.d/bt restart
</code></pre>
<p>这样的话，就是显示2099年到期了</p>
<p>————————————————</p>
<p>不管你用不用的上，建议把这几个老版本下载保存一份</p>
<p>脚本<br>
http://download.bt.cn/install/install.sh<br>
http://download.bt.cn/install/update_pro.sh</p>
<p>面板文件<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.0.zip<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.1.zip<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.2.zip<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.0_pro.zip<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.1_pro.zip<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.2_pro.zip</p>
<p>主要是安装脚本和5.9.0和5.9.2这三个<br>
http://download.bt.cn/install/install.sh<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.0_pro.zip<br>
http://download.bt.cn/install/update/LinuxPanel-5.9.2_pro.zip</p>
<p>——————————————————————————————</p>
<h1 id="一键脚本">一键脚本</h1>
<h3 id="确保有wget和unzip">确保有wget和unzip</h3>
<pre><code class="language-bash">yum install -y wget unzip
apt install -y wget unzip
</code></pre>
<h2 id="方法1-2">方法1</h2>
<p><strong>以下代码一起复制粘贴回车</strong></p>
<pre><code class="language-bash">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; echo y | sh install.sh &amp;&amp; \
wget -O update.sh http://download.bt.cn/install/update_pro.sh &amp;&amp; bash update.sh pro &amp;&amp; \
&gt;/www/server/panel/data/userInfo.json &amp;&amp; \
/etc/init.d/bt restart &amp;&amp; /etc/init.d/bt default
</code></pre>
<h2 id="方法2-2">方法2</h2>
<p><strong>以下代码一起复制粘贴回车</strong></p>
<pre><code class="language-bash">wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; echo y | sh install.sh &amp;&amp; \
wget -O update.sh http://download.bt.cn/install/update_pro.sh &amp;&amp; bash update.sh pro &amp;&amp; \
cd /www/server &amp;&amp; cp -r panel panel-bak &amp;&amp; \
wget http://download.bt.cn/install/update/LinuxPanel-5.9.0_pro.zip &amp;&amp; \
unzip -o LinuxPanel-5.9.0_pro.zip panel/class/common.py &amp;&amp; rm -f LinuxPanel-5.9.0_pro.zip &amp;&amp; \
sed -i &quot;s/data = panelAuth.panelAuth().get_order_status(None);/data = {'status' : True,'msg' : {'endtime' : 32503651199 }};/&quot; /www/server/panel/class/common.py &amp;&amp; \
&gt;/www/server/panel/data/userInfo.json &amp;&amp; \
/etc/init.d/bt restart &amp;&amp; /etc/init.d/bt default
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Traffic Server实现高性能反向代理]]></title>
        <id>https://xiu.pw/o5UTHhSIn/</id>
        <link href="https://xiu.pw/o5UTHhSIn/">
        </link>
        <updated>2020-10-13T02:00:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-apache-traffic-server简介">1, Apache Traffic Server简介</h1>
<p>Apache Traffic Server由Yahoo于2009年开源，经过现在已经成为了非常成熟的代理/缓存/CDN系统。早在2009年，雅虎使用Traffic Server就可以用150台服务器实现每天400 TB的高速流量分发。经过多年的发展，ATS已经用于非常多的商业CDN分发与大型网络。Traffic Server与Nginx, Varnish三者几乎称霸了世界上所有CDN运营商，而Traffic Server又是这三者之中使用量最大的。与Nginx相比，Traffic Server拥有同样优异的性能显著的更多的功能，更丰富的接口，以及高度自定义的配置。与Varnish相比，Traffic Server对于高并发高负载的处理更为出色。</p>
<p>使用Traffic Server的CDN/大型网络有Apple, Comcast, Yahoo, Akamai, 以及国内的又拍云等。Traffic Server, Nginx, Varnish各自的优缺点可以查看这个讨论：https://www.bizety.com/2016/01/07/nginx-vs-varnish-vs-apache-traffic-server-high-level-comparison/</p>
<h1 id="2-安装traffic-server">2, 安装Traffic Server</h1>
<p>安装Traffic Server之前，请确保您的VPS/独服上没有安装其他的Web服务器程序，否则会发生冲突。本文的操作环境为Ubuntu 20.04 LTS 64 bit.  其他操作系统的安装与配置方法类似。Traffic Server将使用编译方式安装，当前版本为8.0.8。若您使用系统自带的包管理器安装，则版本可能较老，请注意设置上可能会有所差异。</p>
<p>请前往https://www.apache.org/dyn/closer.cgi/trafficserver下载最新版本的安装包。</p>
<pre><code>wget https://mirrors.ocf.berkeley.edu/apache/trafficserver/trafficserver-8.0.8.tar.bz2
tar xjf trafficserver-8.0.8.tar.bz2
</code></pre>
<h5 id="安装必要的依赖环境与编译器">安装必要的依赖环境与编译器：</h5>
<pre><code class="language-bash">apt install automake libtool pkg-config libmodule-install-perl gcc g++ libssl-dev tcl-dev libpcre3-dev libcap-dev libhwloc-dev libncurses5-dev libcurl4-openssl-dev flex autotools-dev bison debhelper dh-apparmor gettext intltool-debian libbison-dev libexpat1-dev libfl-dev libsigsegv2 libsqlite3-dev m4 po-debconf tcl8.6-dev zlib1g-dev
</code></pre>
<h5 id="编译安装traffic-server">编译安装Traffic Server:</h5>
<pre><code class="language-bash">cd trafficserver-8.0.8
./configure --enable-experimental-plugins
make
make install
其中，–enable-experimental-plugins参数这里可以不加。

</code></pre>
<p>安装完毕后，为配置文件创建一个符号链接，便于管理：</p>
<pre><code class="language-bash">ln -s /usr/local/etc/trafficserver /etc/trafficserver
</code></pre>
<h5 id="执行完毕后所有的traffic-server配置文件都在etctrafficserver目录中-我们接下来需要配置这个目录中的多个文件">执行完毕后，所有的Traffic Server配置文件都在/etc/trafficserver目录中。我们接下来需要配置这个目录中的多个文件。</h5>
<figure data-type="image" tabindex="1"><img src="https://qing.su/wp-content/uploads/2020/07/configs.png" alt="" loading="lazy"></figure>
<h1 id="3-配置url映射规则">3, 配置URL映射规则</h1>
<p>为了实现反代，我们需要配置URL映射规则，这样Traffic Server就能按照我们的指令来进行替换。</p>
<p>下面我们将用proxy.qing.su和origin.qing.su这两个域名为例。假设源站域名为origin.qing.su, 源站在另一台服务器上。我们想用proxy.qing.su这个域名来反代源站origin.qing.su.</p>
<h5 id="编辑文件-recordsconfig-找到下面这行">编辑文件 records.config, 找到下面这行：</h5>
<pre><code class="language-bash">CONFIG proxy.config.http.server_ports STRING 8080 8080:ipv6
将其修改为：
CONFIG proxy.config.http.server_ports STRING 80 443:ssl
如下图所示。
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://qing.su/wp-content/uploads/2020/07/records1.png" alt="" loading="lazy"></figure>
<pre><code class="language-bash">再找到下面这行，将0改为1：
CONFIG proxy.config.url_remap.pristine_host_hdr INT 0
如下图所示。
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://qing.su/wp-content/uploads/2020/07/records2.png" alt="" loading="lazy"></figure>
<h5 id="然后编辑文件remapconfig-所有的反代映射规则都写在这个文件中-在文件末尾添加下面的行">然后编辑文件remap.config.  所有的反代/映射规则都写在这个文件中。在文件末尾添加下面的行：</h5>
<pre><code class="language-bash">redirect http://proxy.qing.su/ https://proxy.qing.su/
map https://proxy.qing.su/ https://origin.qing.su/
reverse_map https://origin.qing.su/ https://proxy.qing.su/
map / https://origin.qing.su/
保存退出即可。
</code></pre>
<h1 id="4-配置缓存规则">4, 配置缓存规则</h1>
<p>通过缓存的配置，我们能够节省服务器资源，且使得访问速度得到提升。编辑文件records.config, 设置下面的行：</p>
<pre><code class="language-bash">CONFIG proxy.config.http.cache.http INT 1
CONFIG proxy.config.http.cache.ignore_client_cc_max_age INT 1
CONFIG proxy.config.http.normalize_ae_gzip INT 1
CONFIG proxy.config.http.cache.cache_responses_to_cookies INT 1
CONFIG proxy.config.http.cache.cache_urls_that_look_dynamic INT 1
CONFIG proxy.config.http.cache.when_to_revalidate INT 0
CONFIG proxy.config.http.cache.required_headers INT 2
CONFIG proxy.config.http.cache.ignore_client_no_cache INT 1
</code></pre>
<p>其中的参数设置我将在下一篇搭建CDN的教程中具体介绍。对于一个简单高效的反向代理实例，上面这些设置一般能够满足需求。</p>
<h5 id="再编辑文件storageconfig-在这里我们可以设置分配给服务器用来储存缓存内容的空间-我们这里设置为2-gb">再编辑文件storage.config.  在这里我们可以设置分配给服务器用来储存缓存内容的空间。我们这里设置为2 GB.</h5>
<pre><code class="language-bash">var/trafficserver 2048M
</code></pre>
<h1 id="5-配置ssl证书">5, 配置SSL证书</h1>
<p>我们可以在Traffic Server中配置SSL证书，实现网站的安全访问。如果您反代的是自己的源站，那么我建议您去掉源站的SSL证书，这样可以减轻源站的负载。源站是否配置SSL对于前端反代站的设置没有任何影响。</p>
<p>首先，我们新建一个目录，用于储存所有的SSL证书。</p>
<pre><code class="language-bash">mkdir /etc/trafficserver/ssl
chown nobody /etc/trafficserver/ssl
chmod 0760 /etc/trafficserver/ssl
</code></pre>
<p>然后，将对应域名的私钥和证书放在这个文件夹中。如果您的反代站域名和源站域名一样（比如CDN），您可以直接复制源站的证书。如果不一样，您需要为反代站的域名申请SSL证书。我们假设反代站私钥地址为/etc/trafficserver/ssl/proxy.qing.su.key, 反代站证书地址为/etc/trafficserver/ssl/proxy.qing.su.crt.</p>
<p>编辑文件records.config, 指明SSL证书存放目录。添加下面的行：</p>
<pre><code class="language-bash">CONFIG proxy.config.ssl.server.cert.path STRING /etc/trafficserver/ssl/
CONFIG proxy.config.ssl.server.private_key.path STRING /etc/trafficserver/ssl/
</code></pre>
<p>保存退出。然后编辑文件ssl_multicert.config.  添加下面的行：</p>
<pre><code class="language-bash">dest_ip=88.88.88.88 ssl_cert_name=proxy.qing.su.crt ssl_key_name=proxy.qing.su.key
</code></pre>
<p>其中，88.88.88.88为源站IP.  如果您有多个源站IP, 就添加多行。如果想要匹配所有IP, 可以用通配符*来匹配。这样，我们就指明了每个源站对应的SSL证书的文件名。</p>
<h1 id="6-运行traffic-server">6, 运行Traffic Server</h1>
<p>每次修改配置文件后，需要重新载入配置文件，使得Traffic Server启用我们对配置文件做出的修改。</p>
<pre><code class="language-bash">traffic_ctl config reload
</code></pre>
<p>载入配置文件的过程中您可能遇到下面这样的报错：</p>
<pre><code class="language-bash">traffic_ctl: error while loading shared libraries: libtsmgmt.so.8: cannot open shared object file: No such file or directory
</code></pre>
<p>执行下面的命令即可：</p>
<pre><code class="language-bash">ldconfig
</code></pre>
<p>如果载入配置文件的过程中遇到了下面这样的错误：</p>
<pre><code class="language-bash">traffic_ctl: server start failed: [5] Error establishing socket connection.
</code></pre>
<p>这种情况一般是Traffic Server没有启用。您可以执行traffic_manager运行Traffic Server, 或者使用下面的命令运行：</p>
<pre><code class="language-bash">trafficserver start
</code></pre>
<p>运行Traffic Server之后，访问我们的反代站网址，应该已经可以正常显示源站内容了。如果是一个动态网站，那么该站点的交互功能，比如表单、用户登录、评论等功能都应该可以正常使用了。比如，我随手用域名yaofan.shop反代了一下全球主机交流论坛的网站hostloc.com,  反代的站点和源站完全一样，可以正常注册，登录和评论。</p>
<figure data-type="image" tabindex="4"><img src="https://qing.su/wp-content/uploads/2020/07/3-1-1024x678.png" alt="" loading="lazy"></figure>
<p>综上，我们使用Apache Traffic Server轻松实现了对源站的反向代理，并配置了缓存系统和SSL证书。<br>
本文作者为香菇肥牛，<a href="https://qing.su/article/traffic-server-reverse-proxy.html" title="原文链接">原文链接</a>, 转载需注明原文链接。谢谢！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网页防止调试按f12关闭网页或跳转方法]]></title>
        <id>https://xiu.pw/YHapp3sOT/</id>
        <link href="https://xiu.pw/YHapp3sOT/">
        </link>
        <updated>2020-09-29T19:25:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p><strong>在有些页面不想让用户访问F12的情况下我们需要如何去处理,要如何实现用户访问F12关闭网页或进行跳转。</strong></p>
<p><strong>下面具体贴上代码 复制到你的网页代码中即可</strong></p>
<pre><code class="language-php">&lt;script type=&quot;text/javascript&quot;&gt;
//判断F12审查元素
function fuckyou() {
window.close(); //关闭当前窗口(防抽)
window.location = &quot;about:blank&quot;; //将当前窗口跳转置空白页
}

function ck() {
console.profile();
console.profileEnd();
//我们判断一下profiles里面有没有东西，如果有，肯定有人按F12了，没错！！
if(console.clear) {
console.clear()
};
if(typeof console.profiles == &quot;object&quot;) {
return console.profiles.length &gt; 0;
}
}

function hehe() {
if((window.console &amp;&amp; (console.firebug || console.table &amp;&amp; /firebug/i.test(console.table()))) || (typeof opera == 'object' &amp;&amp; typeof opera.postError == 'function' &amp;&amp; console.profile.length &gt; 0)) {
fuckyou();
}
if(typeof console.profiles == &quot;object&quot; &amp;&amp; console.profiles.length &gt; 0) {
fuckyou();
}
}
hehe();
window.onresize = function() {
if((window.outerHeight - window.innerHeight) &gt; 200)
//判断当前窗口内页高度和窗口高度，如果差值大于200，那么呵呵
fuckyou();
}
&lt;/script&gt;
</code></pre>
<h2 id="f12-网页跳转js">F12-网页跳转JS</h2>
<pre><code class="language-javascript">function collect() {
    //开始javascript执行过程的数据收集
    console.profile();
    //配合profile方法，作为数据收集的结束
    console.profileEnd();
    //我们判断一下profiles里面有没有东西，如果有，肯定有人按F12了，没错！！  
    if (console.clear) {
        //清空控制台
        console.clear()
    };
    if (typeof console.profiles == &quot;object&quot;) {
        return console.profiles.length &gt; 0;
    }
}
function check() {
    if ((window.console &amp;&amp; (console.firebug || console.table &amp;&amp; /firebug/i.test(console.table()))) || (typeof opera == 'object' &amp;&amp; typeof opera.postError == 'function' &amp;&amp; console.profile.length &gt; 0)) {
        jump();
    }
    if (typeof console.profiles == &quot;object&quot; &amp;&amp; console.profiles.length &gt; 0) {
        jump();
    }
}
check();
window.onresize = function() {
    //判断当前窗口内页高度和窗口高度
    if ((window.outerHeight - window.innerHeight) &gt; 200)
    jump();
}
function jump() {
    window.location = &quot;https://72.rs&quot;;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[screen运行rclone挂载]]></title>
        <id>https://xiu.pw/GSfwPi2fH/</id>
        <link href="https://xiu.pw/GSfwPi2fH/">
        </link>
        <updated>2020-09-20T03:42:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="screen命令可以用于多任务同时操作功能可进行任务间的切换">screen命令可以用于多任务同时操作功能（可进行任务间的切换）</h1>
<h2 id="1-安装screen">1、安装screen</h2>
<h3 id="centos下安装">centos下安装：</h3>
<pre><code class="language-bash">yum install screen
</code></pre>
<h3 id="debian或者ubuntu下安装">Debian或者Ubuntu下安装：</h3>
<pre><code class="language-bash">apt-get install screen
</code></pre>
<h2 id="2-安装完成后创建一个会话">2、安装完成后，创建一个会话</h2>
<pre><code class="language-bash">screen -S 会话名
</code></pre>
<h2 id="3-就能进入运行你想运行的程序本文以rclone挂载onedrive为例挂载googledeive方法也差不多运行挂载命令-演示name为od本地文件为rootonedrive网盘目录为根目录的情况">3、就能进入，运行你想运行的程序，本文以rclone挂载onedrive为例，挂载googledeive方法也差不多，运行挂载命令。演示name为od，本地文件为/root/onedrive，网盘目录为根目录/的情况</h2>
<pre><code class="language-bash">rclone mount od:/ /root/onedrive --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000
</code></pre>
<h2 id="4-回车后会运行切换会主操作界面用ctrlad">4、回车后会运行，切换会主操作界面用ctrl+a+d</h2>
<pre><code class="language-bash">其他命令：

显示所有会话：
screen -ls

恢复一个会话：
screen -r 会话名

如果上面的无法恢复，使用
screen -d -r 会话名
</code></pre>
<p><strong>注：如在会话中输入exit，将会退出，会话将不存在</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DD Windows 一键脚本（包含GCP谷歌云Oracle甲骨文）]]></title>
        <id>https://xiu.pw/TtlfXDfto/</id>
        <link href="https://xiu.pw/TtlfXDfto/">
        </link>
        <updated>2020-09-18T09:45:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="说明">说明</h1>
<ul>
<li>无限制全自动dd安装Windows</li>
<li>突破没有VNC,没有救援模式,内存比dd包小的限制</li>
<li>使用Debian Live CD中的busybox做中间媒介,经过复杂的处理使本机的网络参数传进Windows操作系统中</li>
<li>即使没有DHCP能够让Windows获取网络参数,也能让Windows操作系统在开机的第一时间能够连通网络</li>
</ul>
<p><strong>特别注意：OpenVZ构架不适用</strong></p>
<h1 id="安装安装">安装安装</h1>
<p>#Debian/Ubuntu:</p>
<pre><code class="language-bash">apt-get install -y xz-utils openssl gawk file
</code></pre>
<p>#RedHat/CentOS:</p>
<pre><code class="language-bash">yum install -y xz openssl gawk file
</code></pre>
<p>如果出现错误，请运行</p>
<p>#Debian/Ubuntu:</p>
<pre><code class="language-bash">apt-get update
</code></pre>
<p>#RedHat/CentOS:</p>
<pre><code class="language-bash">yum update
</code></pre>
<h2 id="一键脚本">一键脚本</h2>
<pre><code class="language-bash">wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd '[Windows dd包直连地址]'
</code></pre>
<h1 id="精简版dd包">精简版DD包</h1>
<p>选择好版本，输入以下一键脚本即可</p>
<pre><code class="language-bash">#DD Windows Server 2003 32位 精简版 [账户Administrator密码cxthhhhh.com]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1j9ow8dsIA7DucsGpDI-kzJwiNW9kMceT'

#DD Windows Server 2008 R2 64位 精简版 [账户Administrator密码WinSrv2008x64-Chinese]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1DTps9WwC6RZ8szflais8YazpkCVdqdI7'

#DD Windows Server 2012 R2 64位 精简版 [账户Administrator密码WinSrv2012r2x64-Chinese]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1KTzROA2eWTHC8qWUG2Vr-onuRTwaIOSe'

#DD Windows Server 2019 Datacenter 64位 精简版 [账户Administrator密码WinSrv2019dc-Chinese]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1NbOzolHsDGbp3gJ3TeQ9_4qkmSLIuO07'

#DD Windows7 32位 精简版 [账户Administrator密码Windows7x86-Chinese]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/15NkZxVdkcx2P9cFez9gxkqVEQksKMrx1'

#DD Windows7 sp1 64位 旗舰精简版 自带IIS [账户Administrator密码www.nat.ee]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1KA9PDH4T2ODbxS97T6MtTk5TwifQQoIp'

#DD Windows7 64位 旗舰精简版 [账户Administrator密码www.nat.ee]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1C9Y0Iu1pGX4-blb_3G49jOqv13Zeka6-'

#DD Windows10 64位 企业精简版 2019LTSC [账户Administrator密码www.nat.ee]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1pUNKV0nQvFXDZYJnfq2FzEfQNCZ3_5g7'
</code></pre>
<h2 id="完整版dd包">完整版DD包</h2>
<pre><code class="language-bash">#DD Windows Server 2012 R2 Datacenter 64位 完整版 [账户administrator密码Password147]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1bfXS59h0y8Ibz5o84DvcBMfqhP0d12Ib'

#DD Windows Server 2016 Datacenter 64位 完整版 [账户administrator密码Password147]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1CElbDjEXrjPIX4GpdRBwRXBWTtSHOwzi'

#DD Windows Server 2019 Datacenter 64位 完整版 [账户administrator密码Password147]
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1gRIT702MrVzLr8Bmk8OF-_Ckp02_tOxE'
</code></pre>
<h2 id="oracle甲骨文">Oracle甲骨文</h2>
<p>此DD包仅适用于Oracle甲骨文DD Win使用</p>
<pre><code class="language-bash">wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'https://api.moeclub.org/GoogleDrive/1NHKdm3xfQ3HySNCGvrzgdz7RMVCI1qGy'
</code></pre>
<h2 id="网路参数安装">网路参数安装</h2>
<p>比如GCP谷歌云Azure微软云OVH云服务器等需要指定网络参数安装的方式，示例为GCP谷歌云</p>
<pre><code># 将X.X.X.X替换为自己的网络参数.
# --ip-addr :IP Address/内网IP地址
# --ip-mask :Netmask   /子网掩码
# --ip-gate :Gateway   /网关
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh --ip-addr X.X.X.X --ip-mask X.X.X.X --ip-gate X.X.X.X -dd 'DD包 直链地址'
</code></pre>
<p>例：<br>
DD Windows 7 64位 精简旗舰版 只需替换--ip-addr后面的X.X.X.X为你自己的内网IP即可，其他不变<br>
在GCP谷歌云Debian Ubuntu测试成功CentOS未测试<br>
默认账户Administrator密码www.nat.ee</p>
<h2 id="gcp谷歌云-台湾">GCP谷歌云-台湾</h2>
<pre><code class="language-bash">
wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh --ip-addr X.X.X.X --ip-mask 255.255.255.0 --ip-gate 10.140.0.1 -dd 'https://api.moeclub.org/GoogleDrive/1C9Y0Iu1pGX4-blb_3G49jOqv13Zeka6-'
</code></pre>
<h2 id="gcp谷歌云-香港">GCP谷歌云 香港</h2>
<pre><code class="language-bash">wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh --ip-addr X.X.X.X --ip-mask 255.255.255.0 --ip-gate 10.170.0.1 -dd 'https://api.moeclub.org/GoogleDrive/1C9Y0Iu1pGX4-blb_3G49jOqv13Zeka6-'
</code></pre>
<p>连接上后如果遇到无法打开网页的情况，修改DNS即可</p>
<pre><code class="language-bash">8.8.8.8
8.8.4.4
</code></pre>
<h1 id="关于激活">关于激活</h1>
<p>可以使用本博客的KMS激活</p>
<p>如果不能使用KMS激活，可以试试下面的Key（不一定都能成功激活）<br>
RHTBY-VWY6D-QJRJ9-JGQ3X-Q2289<br>
H8PDJ-H4NKW-3GKH7-YHKJ7-4C2JR<br>
右键以管理员身份运行CMD（命令提示符），依次执行下面的命令</p>
<pre><code>slmgr.vbs -upk
slmgr.vbs -ipk RHTBY-VWY6D-QJRJ9-JGQ3X-Q2289
slmgr.vbs -ato
slmgr.vbs -dlv
</code></pre>
<p>Windows服务器开启Ping功能<br>
进入服务器后点击 开始 → 运行 输入如下命令：<br>
开启Ping：</p>
<pre><code>netsh firewall set icmpsetting 8
</code></pre>
<p>关闭Ping：</p>
<pre><code>netsh firewall set icmpsetting 8 disable
</code></pre>
<p>备用链接<br>
备用链接存储在Dropbox国内需要科学上网，国外机器可以直接使用；</p>
<h1 id="精简版">精简版</h1>
<pre><code class="language-bash">#DD Windows Server 2003 32位 精简版 [账户Administrator密码cxthhhhh.com]
https://dl-web.dropbox.com/s/ajqa1vwxfqulazd/Win-Server-2003-X32%5BAdministrator-cxthhhhh.com%5D.gz

#DD Windows Server 2008 R2 64位 精简版 [账户Administrator密码WinSrv2008x64-Chinese]
https://dl-web.dropbox.com/s/jhxp38eeu9quu12/Win-Server-2008R2-X64%5BAdministrator-WinSrv2008x64-Chinese%5D.gz

#DD Windows Server 2012 R2 64位 精简版 [账户Administrator密码WinSrv2012r2x64-Chinese]
https://dl-web.dropbox.com/s/9r7v27hmmbytur1/Win-Server-2012R2-X64%5BAdministrator-WinSrv2012r2x64-Chinese%5D.gz

#DD Windows Server 2019 Datacenter 64位 精简版 [账户Administrator密码WinSrv2019dc-Chinese]
https://dl-web.dropbox.com/s/y675vyr04egz2xs/Win-Server2019-Datacenter-X64%5BAdministrator-WinSrv2019dc-Chinese%5D.gz

#DD Windows7 32位 精简版 [账户Administrator密码Windows7x86-Chinese]
https://dl-web.dropbox.com/s/6wqa2tf51rtojdh/Win7-X86%5BAdministrator-Windows7x86-Chinese%5D.gz

#DD Windows7 sp1 64位 旗舰精简版 自带IIS [账户Administrator密码www.nat.ee]
https://dl-web.dropbox.com/s/4ouiqrddtajk1c8/Win7%20X64%20sp1%20IIS%5BAdministrator-www.nat.ee%5D.gz

#DD Windows7 64位 旗舰精简版 [账户Administrator密码www.nat.ee]
https://dl-web.dropbox.com/s/fzoaonaj9fbxatg/Win7-X64%5BAdministrator-www.nat.ee%5D.gz

#DD Windows10 64位 企业精简版 2019LTSC [账户Administrator密码www.nat.ee]
https://dl-web.dropbox.com/s/ra7m1zm0fevjuby/Win10-2019LTSC-X64%5BAdministrator-www.nat.ee%5D.gz

#Oracle专用 DD Windows7 64位 精简版 [账户Administrator密码www.nat.ee]
https://dl-web.dropbox.com/s/x5f23j6qhp1dneq/Oracle-Win7-X64%5BAdministrator-www.nat.ee%5D.gz

#OVH专用 DD Windows7 64位 精简版 [账户administrator密码www.80host.com]
https://dl-web.dropbox.com/s/knhw80grm9o3b35/OVH-Win7-X64%5Badministrator-www.80host.com%5D.gz
</code></pre>
<h1 id="完整版">完整版</h1>
<pre><code class="language-bash">#DD Windows Server 2012 R2 Datacenter 64位 完整版 [账户administrator密码Password147]
https://dl-web.dropbox.com/s/3y3mvht0u6fm34g/cn_windows2012r2%5Badministrator-Password147%5D.gz

#DD Windows Server 2016 Datacenter 64位 完整版 [账户administrator密码Password147]
https://dl-web.dropbox.com/s/wk3zltm9kepfg99/cn_windows2016%5Badministrator-Password147%5D.gz

#DD Windows Server 2019 Datacenter 64位 完整版 [账户administrator密码Password147]
https://dl-web.dropbox.com/s/bp92z37ae4hlnd0/cn_windows2019%5Badministrator-Password147%5D.gz

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux系统下录制命令操作]]></title>
        <id>https://xiu.pw/7WlZGngaW/</id>
        <link href="https://xiu.pw/7WlZGngaW/">
        </link>
        <updated>2020-09-16T13:38:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="linux系统下录制命令操作">Linux系统下录制命令操作</h1>
<p>通常情况下，在Windows或者Android、iOS系统下我们能借助软件进行录屏操作，而在Linux命令行模式下，如果想要录制命令操作，应该怎样进行录屏呢？**</p>
<p>#如何安装<br>
Centos</p>
<pre><code>yum install asciinema -y
</code></pre>
<p>Debian/Ubuntu</p>
<pre><code>apt-get install asciinema -y
</code></pre>
<p>#如何录制<br>
asciinema rec <file-name><br>
如：</p>
<pre><code>asciinema rec demo.rec
</code></pre>
<p><strong>录制完成后以Ctrl+D结束，文件会保存在当前目录，如果想要保存到其他位置，使用asciinema rec /path/demo.rec即可。</strong></p>
<p>#如何使用<br>
嵌入网页需要调用官方的css和js，由于官方的css和js文件不在国内，调用起来非常很慢，影响用户体验。所以我把文件放在GitHub上面，使用jsDelivr来加速文件。<br>
调用</p>
<pre><code class="language-css">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/gh/moeik/sshrec/sshrec.css&quot; /&gt;   
&lt;script src=&quot;https://cdn.jsdelivr.net/gh/moeik/sshrec/sshrec.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>你可以放在页面的head处，避免每次使用都去调用。<br>
或者在需要插入视频的时候调用：</p>
<pre><code class="language-css">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/gh/moeik/sshrec/sshrec.css&quot; /&gt;   
&lt;script src=&quot;https://cdn.jsdelivr.net/gh/moeik/sshrec/sshrec.js&quot;&gt;&lt;/script&gt;
&lt;sshsharer-player src=&quot;/path/demo.rec&quot;&gt;&lt;/sshsharer-player&gt;
</code></pre>
<p>插入轻视频</p>
<pre><code class="language-css">&lt;sshsharer-player src=&quot;/path/demo.rec&quot;&gt;&lt;/sshsharer-player&gt;
</code></pre>
<p>如果调用远程视频文件src处也可以换成http链接。</p>
<h2 id="typecho使用">Typecho使用：</h2>
<p>在写文章的时候强制转换为HTML格式即可~</p>
<pre><code class="language-css">!!!
&lt;sshsharer-player src=&quot;/path/demo.rec&quot;&gt;&lt;/sshsharer-player&gt;
!!!
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux系统一键申请域名证书]]></title>
        <id>https://xiu.pw/9cBkSiskQ/</id>
        <link href="https://xiu.pw/9cBkSiskQ/">
        </link>
        <updated>2020-09-16T13:35:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="linux系统一键申请lets-encrypt域名证书">Linux系统一键申请Let's Encrypt域名证书</h1>
<h2 id="适用于linux系统nginx环境">适用于Linux系统NGINX环境</h2>
<h3 id="使用">使用:</h3>
<p>申请证书前请提前解析域名到服务器</p>
<pre><code>bash &lt;(curl -s -L git.io/dmSSL)
</code></pre>
<p>按照提示输入域名即可</p>
<p>证书文件保存在/home/ssl/<domain>/路径下</p>
<p>Github:https://github.com/moeik/domainSSL</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gclone 一个 Rclone 的魔改版本支持分享转存突破750G限制]]></title>
        <id>https://xiu.pw/lVqtW9KOV/</id>
        <link href="https://xiu.pw/lVqtW9KOV/">
        </link>
        <updated>2020-09-15T12:38:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="介绍">介绍</h1>
<p>Gclone是一个基于Rclone的魔改版本，功能与原版Rclone相同，但增加了两个实用功能；</p>
<p>支持服务端直接转存他人分享的文件及文件夹<br>
支持突破Google Drive单账号每日750G限制，基于Google的Service Account服务<br>
GitHub项目：https://github.com/donwa/gclone</p>
<h2 id="gclone">Gclone</h2>
<pre><code>bash &lt;(wget -qO- https://git.io/gclone.sh)
</code></pre>
<p>为了以后使用方便，直接将gclone改名rclone</p>
<pre><code>cp /usr/bin/gclone /usr/bin/rclone
</code></pre>
<p>参考：Rclone 常用命令参数：https://sunpma.com/864.html<br>
Gclone 新增操作命令</p>
<pre><code>rclone copy 配置名字:{文件ID} 配置名字:网盘路径 --drive-server-side-across-configs
</code></pre>
<p>说明：{文件ID}可以是分享的单独文件也可以是文件夹<br>
分享链接一般是这样的：https://drive.google.com/drive/folders/XXXXXX<br>
最后面的一串字符XXXXXX既是分享ID<br>
关于突破750G需要使用Google的Service Account服务，过程有些复杂，如果没需求就不用弄了；<br>
需要的话可以自行Google教程，Service Account的100个文件最好保存到本地，方便以后使用；</p>
<h2 id="fclone">Fclone</h2>
<p>GitHub项目：https://github.com/mawaya/rclone<br>
Fclone是另一个Rclone的修改版，操作与Rclone和Gclone完全相同<br>
在GitHub中选择需要的Fclone版本，然后在本地解压得到名为fclone的文件<br>
然后将得到的fclone文件上传至服务器/usr/bin目录下<br>
赋予Fclone权限</p>
<pre><code>chmod +x /usr/bin/fclone
</code></pre>
<p>使用时命令改为fclone即可；</p>
<p>快速安装</p>
<pre><code># 下载程序
wget -P /usr/bin https://objectstorage.ap-seoul-1.oraclecloud.com/n/cnyzzr4k2nzj/b/sunpma/o/fclone

# 将Fclone改名为Rclone
cp /usr/bin/fclone /usr/bin/rclone

# 赋予权限
chmod +x /usr/bin/rclone
</code></pre>
<h2 id="安装过程">安装过程</h2>
<p>如果有Service Account的100个文件的话，就先建立以下目录，然后上传文件到accounts目录下</p>
<pre><code>mkdir /root/AutoRclone
mkdir /root/AutoRclone/accounts
</code></pre>
<p>如果没有Service Account就略过，直接开始下面的安装即可；<br>
脚本刚才已经下载过了，现在直接输入rclone config开始安装</p>
<pre><code>n) New remote
s) Set configuration password
q) Quit config
n/s/q&gt; n   # 输入n回车，新建配置
name&gt; GD   # 新建配置的名称，自行设定
Type of storage to configure.
Enter a string value. Press Enter for the default (&quot;&quot;).
Choose a number from below, or type in your own value
 1 / 1Fichier
   \ &quot;fichier&quot;
 2 / Alias for an existing remote
   \ &quot;alias&quot;
 3 / Amazon Drive
   \ &quot;amazon cloud drive&quot;
 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)
   \ &quot;s3&quot;
 5 / Backblaze B2
   \ &quot;b2&quot;
 6 / Box
   \ &quot;box&quot;
 7 / Cache a remote
   \ &quot;cache&quot;
 8 / Dropbox
   \ &quot;dropbox&quot;
 9 / Encrypt/Decrypt a remote
   \ &quot;crypt&quot;
10 / FTP Connection
   \ &quot;ftp&quot;
11 / Google Cloud Storage (this is not Google Drive)
   \ &quot;google cloud storage&quot;
12 / Google Drive
   \ &quot;drive&quot;
13 / Google Photos
   \ &quot;google photos&quot;
14 / Hubic
   \ &quot;hubic&quot;
15 / JottaCloud
   \ &quot;jottacloud&quot;
16 / Koofr
   \ &quot;koofr&quot;
17 / Local Disk
   \ &quot;local&quot;
18 / Mega
   \ &quot;mega&quot;
19 / Microsoft Azure Blob Storage
   \ &quot;azureblob&quot;
20 / Microsoft OneDrive
   \ &quot;onedrive&quot;
21 / OpenDrive
   \ &quot;opendrive&quot;
22 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)
   \ &quot;swift&quot;
23 / Pcloud
   \ &quot;pcloud&quot;
24 / Put.io
   \ &quot;putio&quot;
25 / QingCloud Object Storage
   \ &quot;qingstor&quot;
26 / SSH/SFTP Connection
   \ &quot;sftp&quot;
27 / Union merges the contents of several remotes
   \ &quot;union&quot;
28 / Webdav
   \ &quot;webdav&quot;
29 / Yandex Disk
   \ &quot;yandex&quot;
30 / http Connection
   \ &quot;http&quot;
31 / premiumize.me
   \ &quot;premiumizeme&quot;
Storage&gt; 12       # 选择需要挂载的网盘类型
** See help for drive backend at: https://rclone.org/drive/ **

Google Application Client Id
Setting your own is recommended.
See https://rclone.org/drive/#making-your-own-client-id for how to create your own.
If you leave this blank, it will use an internal key which is low performance.
Enter a string value. Press Enter for the default (&quot;&quot;).
client_id&gt;        # 默认直接回车，或者输入自己的OAuth ID
Google Application Client Secret
Setting your own is recommended.
Enter a string value. Press Enter for the default (&quot;&quot;).
client_secret&gt;    # 默认直接回车，或者输入自己的OAuth秘锁
Scope that rclone should use when requesting access from drive.
Enter a string value. Press Enter for the default (&quot;&quot;).
Choose a number from below, or type in your own value
 1 / Full access all files, excluding Application Data Folder.
   \ &quot;drive&quot;
 2 / Read-only access to file metadata and file contents.
   \ &quot;drive.readonly&quot;
   / Access to files created by rclone only.
 3 | These are visible in the drive website.
   | File authorization is revoked when the user deauthorizes the app.
   \ &quot;drive.file&quot;
   / Allows read and write access to the Application Data folder.
 4 | This is not visible in the drive website.
   \ &quot;drive.appfolder&quot;
   / Allows read-only access to file metadata but
 5 | does not allow any access to read or download file content.
   \ &quot;drive.metadata.readonly&quot;
scope&gt; 1 # 选择1然后回车
ID of the root folder
Leave blank normally.

Fill in to access &quot;Computers&quot; folders (see docs), or for rclone to use
a non root folder as its starting point.

Note that if this is blank, the first time rclone runs it will fill it
in with the ID of the root folder.

Enter a string value. Press Enter for the default (&quot;&quot;).
root_folder_id&gt;        # 直接回车
Service Account Credentials JSON file path 
Leave blank normally.
Needed only if you want use SA instead of interactive login.
Enter a string value. Press Enter for the default (&quot;&quot;).
service_account_file&gt; # 直接回车，如果使用Service Account就填写其中一个文件的绝对路径即可：/root/AutoRclone/accounts/0a5af037763bdab70e3a7094d02ec4bd37f8db94.json
Service Account Credentials JSON file path .

Enter a string value. Press Enter for the default (&quot;&quot;).
service_account_file_path&gt; 直接回车，如果使用Service Account就填写这个路径：/root/AutoRclone/accounts/
Edit advanced config? (y/n)
y) Yes
n) No (default)
y/n&gt; n                    # 选择n 不使用高级配置
Remote config
Configure this as a team drive?
y) Yes
n) No (default)
y/n&gt; y                     # 选择n不加载团队盘，选择y加载团队盘
Fetching team drive list...
Choose a number from below, or type in your own value
 1 / 网盘01
   \ &quot;0AFZFXMn1uKs2Uk9PVA&quot;
 2 / 网盘05
   \ &quot;0AI3nH3Vf8NWIUk9PVA&quot;
 3 / 网盘02
   \ &quot;0ADYACmKjlU3JUk9PVA&quot;
Enter a Team Drive ID&gt; # 选择你的团队盘编号
y) Yes this is OK
e) Edit this remote
d) Delete this remote
y/e/d&gt; y       # 选择y回车
Current remotes:

Name                 Type
====                 ====
网盘01             drive

e) Edit existing remote
n) New remote
d) Delete remote
r) Rename remote
c) Copy remote
s) Set configuration password
q) Quit config
e/n/d/r/c/s/q&gt; q   # 输入q回车，保存配置退出</code></pre>
]]></content>
    </entry>
</feed>