<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiu.pw</id>
    <title>秀儿</title>
    <updated>2020-08-16T15:54:24.643Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiu.pw"/>
    <link rel="self" href="https://xiu.pw/atom.xml"/>
    <subtitle>知难而退</subtitle>
    <logo>https://xiu.pw/images/avatar.png</logo>
    <icon>https://xiu.pw/favicon.ico</icon>
    <rights>All rights reserved 2020, 秀儿</rights>
    <entry>
        <title type="html"><![CDATA[一键安装可以使用浏览器访问的Linux桌面环境]]></title>
        <id>https://xiu.pw/9oEjY-emU/</id>
        <link href="https://xiu.pw/9oEjY-emU/">
        </link>
        <updated>2020-08-16T15:46:48.000Z</updated>
        <content type="html"><![CDATA[<p>今天，我们来介绍一下我自己写的一个一键shell脚本。使用此脚本，您可以在您的Linux服务器上一键搭建一个可以随时随地用浏览器访问的Linux桌面环境，让您便捷地管理服务器。</p>
<p><a href="https://github.com/Har-Kuun/OneClickDesktop/" title="Github项目地址">Github项目地址</a> 欢迎大家星星叉叉</p>
<h1 id="1-脚本特色">1, 脚本特色</h1>
<p>从源码编译安装Guacamole服务器<br>
配置Guacamole Web APP<br>
安装Tomcat 9, TigerVNC, XFCE4桌面环境，火狐浏览器<br>
一键安装配置Let’s Encrypt安全证书，开启OCSP装订<br>
安装Nginx反代Tomcat<br>
安装完毕后，您可以使用任意浏览器访问远程桌面，无需再使用VNC客户端</p>
<h1 id="2-安装系统需求">2, 安装系统需求</h1>
<p>目前，本程序仅支持在Ubuntu 18.04/20.04 LTS以及Debian 10的64位操作系统上运行。您的服务器或者VPS最好是全新安装的系统，不带LAMP/LEMP等组件或cPanel/DirectAdmin/宝塔等用户面板。</p>
<p>您的服务器需要有外网IP地址。在安装之前，您需要解析一个域名（可以用三级域名或者一个免费域名）到您的服务器上。安装桌面环境需要至少1 GB的内存。</p>
<h1 id="3-安装教程">3, 安装教程</h1>
<p>您可以使用sudo权限用户或root用户(不建议)登录服务器SSH，然后执行下面的命令即可。</p>
<p>英文版：</p>
<pre><code>wget https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop.sh &amp;&amp; sudo bash OneClickDesktop.sh
</code></pre>
<p>中文版：</p>
<pre><code>wget https://raw.githubusercontent.com/Har-Kuun/OneClickDesktop/master/OneClickDesktop_zh-CN.sh &amp;&amp; sudo bash OneClickDesktop_zh-CN.sh
</code></pre>
<p>程序将自动安装需要的各部分组件，并引导您设置用户名，密码以及域名。</p>
<p>如果安装过程中有报错，您可以检查同目录下的OneClickDesktop.log日志文件。同时建议您在这里留言汇报一下错误信息，或者在Github上提交issue, 这样我就可以即时更新脚本，修复问题。</p>
<p>4, 安装示例<br>
安装好后，我们可以可以直接从浏览器里访问服务器上搭建的桌面程序，如下图。</p>
<figure data-type="image" tabindex="1"><img src="https://qing.su/wp-content/uploads/2020/08/browser-1-1024x560.png" alt="" loading="lazy"></figure>
<p>综上，使用OneClickDesktop一键脚本，您可以自由方便地在Linux服务器上搭建随时随地用浏览器即可访问的桌面环境，让您便捷地管理您的Linux服务器，无需再使用繁琐的命令行。</p>
<p>作者为香菇肥牛，<a href="https://qing.su/article/oneclick-desktop.html" title="原文链接">原文链接</a></p>
<p><strong>注1：添加中文支持</strong><br>
1, 重新配置系统locales</p>
<pre><code>sudo dpkg-reconfigure locales
</code></pre>
<p>2, 安装亚洲语言包</p>
<pre><code>sudo apt-get install language-pack-ja language-pack-zh* language-pack-ko
sudo apt-get install japan* chinese* korean*
</code></pre>
<p>3, 安装亚洲语言字体</p>
<pre><code>sudo apt-get install fonts-arphic-ukai fonts-arphic-uming fonts-ipafont-mincho fonts-ipafon</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何正确使用17ce对WordPress进行压力测试]]></title>
        <id>https://xiu.pw/w1QhXJg1k/</id>
        <link href="https://xiu.pw/w1QhXJg1k/">
        </link>
        <updated>2020-08-16T15:41:19.000Z</updated>
        <content type="html"><![CDATA[<p>大家都知道，17ce.com是非常有名的测速网站。它在全国及世界其他地区拥有数百个测速节点，用户提交测速请求后，17ce就会并发地在这些节点上向待测的网址发送web请求。利用它的高并发性，我们可以用它来测试自己网站的压力响应能力。今天，就来介绍一下如何采用正确的姿势来对WordPress进行压力测试，避免缓存以及UA过滤等因素的影响。</p>
<h1 id="1-绕过wordpress缓存">1, 绕过WordPress缓存</h1>
<p>如果您直接使用17ce来测试WordPress的首页或者某个文章页面，那么大概率无法起到压力测试的效果，原因是大部分WordPress都会安装缓存，使得网站以静态的方式响应给前端，几乎没有数据库查询与CPU消耗。因此，如果要正确进行压力测试，则需要绕过WordPress缓存。</p>
<p>一个比较方便的方法是在WordPress链接后面加上?s=xxx小尾巴，比如https://example.com/?s=656j9f86y.  这个链接的作用是用GET方式搜索WordPress的内容。由于搜索内容没有办法被缓存，因此每一个节点的相应都会产生数据库查询。我们测试了一个随手搭建的测试站，发现测试这个搜索链接之后，产生了很多502响应。</p>
<figure data-type="image" tabindex="1"><img src="https://qing.su/wp-content/uploads/2020/06/1-w-1.png" alt="" loading="lazy"></figure>
<p>类似地，您还可以对您的WordPress的登录页/wp-login.php构造post请求来测试。</p>
<h1 id="2-绕过ua判断">2, 绕过UA判断</h1>
<p>如果您的网站屏蔽了17ce的User Agent, 那么采用默认的设置就无法测试了。您可以看一下测试结果，如果网站响应状态那里都是“下载时间异常”，但是响应时间都很短（小于1秒），那说明您的网站屏蔽了17ce的User Agent.  我们可以修改UA来绕过UA判断。</p>
<p>在测试页面，点击右边Advanced, 然后下边找到User agent, 输入自定义的UA, 比如我们随便输一个Chrome的。</p>
<p>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</p>
<figure data-type="image" tabindex="2"><img src="https://qing.su/wp-content/uploads/2020/06/2-w-1.png" alt="" loading="lazy"></figure>
<h1 id="3-关于typecho">3, 关于Typecho</h1>
<p>Typecho和WordPress类似，只要构造一个搜索链接即可进行测试。Typecho的搜索链接格式为https://example.com/search/xxxxx 如果您使用的是Typecho, 则在17ce上提交这样的地址即可做到压力测试。</p>
<p>作者为香菇肥牛，<a href="https://qing.su/article/162.html" title="原文链接">原文链接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微软 A1/A1P/A3/E3/E5/E3Y API管理面板]]></title>
        <id>https://xiu.pw/mZNa6VHVE/</id>
        <link href="https://xiu.pw/mZNa6VHVE/">
        </link>
        <updated>2020-08-16T14:57:18.000Z</updated>
        <content type="html"><![CDATA[<p>此项目是一个基于API的 Microsoft 365 管理平台, 支持订阅查询，用户管理（查询，新增，删除，分配许可证等），支持批量创建用户，批量删除用户. 支持多账户管理.</p>
<p>后端基于SpringBoot，使用 msal4j 和 microsoft-graph sdk 开发完成</p>
<p><strong>支持 微软 A1/A1P/A3/E3/E5/E3Y等</strong></p>
<h1 id="系统功能">系统功能</h1>
<pre><code>总览：订阅数，许可证数，可用许可证数，用户数，允许登陆用户数，禁止登陆用户数等信息展示
许可查询：查询每个订阅的许可证信息
用户管理：查询，新增，删除，分配许可证等
多账户切换
</code></pre>
<p><em><strong>注意：出现执行新增/删除账户，启用禁用账户，授权账户等操作后，查询结果不变，请右上角点击刷新缓存，或列表中搜索该用户</strong></em></p>
<p>原因：调用微软API比较耗时，第一次查询时将需要的数据拉取到本地缓存（暂无自定义缓存失效功能，默认用户1天，域名1天，订阅30天）。</p>
<p>具体功能查看关于界面【操作教程】</p>
<h1 id="运行">运行</h1>
<p>下载最新版本的额jar包，然后在同目录新建config目录，下载 application-dev.yml文件放到该目录。</p>
<p>按照格式修改配置文件</p>
<p>java -jar microsoft-0.0.1-SNAPSHOT.jar 启动，端口：8099</p>
<h1 id="界面">界面</h1>
<p><img src="https://github.com/6mb/Microsoft-365-Admin/raw/master/.github/%E9%A6%96%E9%A1%B5.png" alt="" loading="lazy"><br>
<img src="https://github.com/6mb/Microsoft-365-Admin/raw/master/.github/%E8%AE%A2%E9%98%85%E7%AE%A1%E7%90%86.png" alt="" loading="lazy"><br>
<img src="https://github.com/6mb/Microsoft-365-Admin/raw/master/.github/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png" alt="" loading="lazy"><br>
<img src="https://github.com/6mb/Microsoft-365-Admin/raw/master/.github/%E5%85%B3%E4%BA%8E.png" alt="" loading="lazy"></p>
<h1 id="api接口">Api接口</h1>
<p><a href="https://github.com/6mb/Microsoft-365-Admin/blob/master/Microsoft%20365%20Admin.md" title="接口文档">接口文档</a></p>
<ul>
<li>Microsoft 365 首页<br>
首页展示<br>
刷新缓存</li>
<li>Microsoft 365 订阅管理<br>
许可统计<br>
许可证列表查询</li>
<li>Microsoft 365 用户管理<br>
查询用户统计<br>
查询用户信息列表<br>
查询用户信息详情<br>
查询绑定域名<br>
添加账号<br>
删除账户<br>
添加订阅<br>
取消订阅<br>
启用账户<br>
禁用账户<br>
批量创建用户信息</li>
</ul>
<h1 id="postman-接口">Postman 接口</h1>
<p><a href="https://raw.githubusercontent.com/6mb/Microsoft-365-Admin/master/.github/Microsoft%20365%20Admin.postman_collection.json" title="点击下载">点击下载</a></p>
<p>请自行设置 .evn {host} 和 {port}<br>
<img src="https://github.com/6mb/Microsoft-365-Admin/raw/master/.github/%E6%8E%A5%E5%8F%A3.png" alt="" loading="lazy"></p>
<p><a href="https://github.com/6mb/Microsoft-365-Admin" title="项目地址">项目地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费对象云存储Backblaze]]></title>
        <id>https://xiu.pw/YiDh0GLhL/</id>
        <link href="https://xiu.pw/YiDh0GLhL/">
        </link>
        <updated>2020-08-16T12:55:50.000Z</updated>
        <content type="html"><![CDATA[<p>Backblaze前10 GB的存储空间是免费的，每天能下载1G以内文件免费，上传免费，并与cloudflare合作，只要套个cloudflareCDN即可无限免费下载</p>
<p>因此我们得到如下产品：</p>
<p>10G存储空间免费</p>
<p>上行免费</p>
<p>下行免费</p>
<p>全球最可靠的云存储服务之一</p>
<p>全球最强的CDN云分发服务之一<br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/0190504003548.jpg" alt="" loading="lazy"><br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/20190504004004.jpg" alt="" loading="lazy"></p>
<p>链接<br>
<a href="https://www.backblaze.com/b2/cloud-storage.html" title="backblaze云存储 ">backblaze云存储 </a>注册一个账号</p>
<p>进入<br>
<a href="https://secure.backblaze.com/user_signin.htm" title="backblaze的B2云存储控制面板">backblaze的B2云存储控制面板</a></p>
<p><img src="https://cangshui.net/wp-content/uploads/2019/05/20190503234926-1024x667.jpg" alt="" loading="lazy"><br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/20190503235043.jpg" alt="" loading="lazy"><br>
然后随便上传一个文件，什么都行<br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/20190503235157-1024x608.jpg" alt="" loading="lazy"></p>
<p>点击我们刚刚上传的图片，得到了一个链接<br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/20190503235326.jpg" alt="" loading="lazy"></p>
<p>于是知道了backblaze给我们分配的域名是 f002.backblazeb2.com</p>
<p>注册一个cloudflare账号：传送门</p>
<p>已经有账户的接入自己的域名到cloudflare，然后添加dns，填上我们刚刚得到的<br>
backblaze域名</p>
<p>由于 backblaze的域名是https的，因此我们需要将cloudflare的ssl设置为full<br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/20190504000530-1024x501.jpg" alt="" loading="lazy"></p>
<p>这样就可以用自己的域名走cloudflare的流量访问文件了:<br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/20190504000845.jpg" alt="" loading="lazy"></p>
<p>当然你如果觉得文件链接不好看太长了，你也可以使用cloudflare自带的页面规则301<br>
<img src="https://cangshui.net/wp-content/uploads/2019/05/20190504002955-1024x656.jpg" alt="" loading="lazy"></p>
<p>这个规则的效果：</p>
<p>打比方浏览器输入http://down.nicemail.ml/666.jpg，将会跳转到</p>
<p>https://down.nicemail.ml/file/down-cangshui-net/666.jpg</p>
<p>cloudflare的带正则参数的301规则</p>
<p>cloudflare并不是不允许https 301 https，而是同一个子域名无法互相301 ，你设为https://down.xxxx.com 跳转到 https://down1.xxxx.com 就行了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一键制作DDWin，批处理!]]></title>
        <id>https://xiu.pw/s9y925myV/</id>
        <link href="https://xiu.pw/s9y925myV/">
        </link>
        <updated>2020-08-09T14:30:40.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://xiu.pw/post-images/1596983474950.png" alt="" loading="lazy"></figure>
<p>makeddwin 工具包，使用批处理制作，代码明文，以及在包里写明依赖文件来自那里，你完全可以替换，代码查阅。</p>
<p>不会还有杠精来喷吧？要不你写个更好的来？<br>
至于你用上报毒与我无关！</p>
<p>说明：<br>
【使用前，请把所需的文件放进相应文件夹！】<br>
目录结构：<br>
bin 文件夹，存放用来制作的依赖程序和文件。<br>
iso 文件夹，存放Windows ISO 系统镜像(只能放1个)<br>
packages 文件夹，存放Windows 补丁文件<br>
driver 文件夹，存放其他驱动文件<br>
virtio 文件夹，存放KVM virtio ISO 驱动镜像(只能放1个)<br>
vhd 文件夹，存放 .vhd格式 虚拟硬盘(只能放1个)<br>
export 文件夹，输出生成的.gz、.wim、和解压的.vhd文件。<br>
注意，只能放一个的目录务必按要求，因为放多个会导致脚本无法判断。</p>
<p>步骤1：使用vhd.cmd批处理，生成一个大小20-30G左右的虚拟硬盘<br>
生成后的虚拟硬盘文件会在vhd目录，虚拟硬盘大小视你安装系统后硬盘体积还剩多少。<br>
一般安装系统后，虚拟硬盘最低要剩空闲有1G左右，后期可以再创建对应体积的虚拟硬盘作调整。</p>
<p>步骤2：使用install.cmd批处理，选择刚才创建的已挂载的虚拟硬盘分区，自行查看[我的电脑]，你虚拟硬盘生成多少G的分区，就选择那个分区，进行下一步安装系统等其他操作。</p>
<p>步骤3：使用dd.cmd批处理，对已经完成制作的.vhd虚拟硬盘文件进行压缩成可DD的文件或者wim文件。<br>
压缩完成后，别忘了测试文件的完整性检查，否则是一个损坏的数据文件是无法使用的！<br>
生成的.gz文件，可以在Linux系统下DD为此系统。<br>
生成的.wim文件，可以在WinPE中安装到实体机系统，又或者添加生成为一个iso文件。<br>
(注意，压缩比较慢通常是1-3小时，电脑配置越高越快！)</p>
<p>网址：nat.ee<br>
批处理：荣耀&amp;制作<br>
本批处理工具仅适合Windows 7 sp1 以上的系统使用！<br>
注意：不能放在带有空格路径的目录，否则出错。<br>
TG交流群：https://t.me/dd_win<br>
如在使用中有任何问题或者建议，欢迎加入交流。</p>
<p>下载链接：https://yyingc.lanzous.com/i72Wzfei7ba<br>
视频教程下载：https://yyingc.lanzous.com/igExyfesota</p>
<p>视频教程：https://www.youtube.com/watch?v=LTVgPFWnnX8<br>
哔哩哔哩：https://www.bilibili.com/video/BV1Pk4y1U7Zp/</p>
<p>转自:https://www.hostloc.com/thread-728111-1-1.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义 git.io 短链接地址与绕过链接生成限制]]></title>
        <id>https://xiu.pw/MH86KLzkf/</id>
        <link href="https://xiu.pw/MH86KLzkf/">
        </link>
        <updated>2020-08-08T14:39:16.000Z</updated>
        <content type="html"><![CDATA[<p>Github 提供了 Git.io 短网址服务，用于缩短 Github 上项目的网址。</p>
<p>官方文档：https://github.com/blog/985-git-io-github-url-shortener</p>
<p>自定义短链接<br>
依据官方文档，生成短链接有两个参数</p>
<p>| 参数名  | 参数值  | 是否必须  |<br>
|  url	源 | URL 链接  | 是  |<br>
|  code | 自定义短链  |  否 |</p>
<p>命令模板<br>
<code>curl -i &quot;https://git.io&quot; -F &quot;url=长链接&quot; -F &quot;code=短链接&quot;</code><br>
使用示例</p>
<pre><code>$ curl -i &quot;https://git.io&quot; -F &quot;url=https://github.com/baoyun-site&quot; -F &quot;code=baoyunsite&quot;
HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Tue, 14 Jul 2020 08:22:52 GMT
Status: 201 Created
Content-Type: text/html;charset=utf-8
Location: https://git.io/baoyunsite
Content-Length: 30
X-Xss-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.026588
X-Node: 7fa64432-805f-49cf-a4d4-6f19c50ae8f3
X-Revision: 392798d237fc1aa5cd55cada10d2945773e741a8
Strict-Transport-Security: max-age=31536000; includeSubDomains
Via: 1.1 vegur$ curl -i &quot;https://git.io&quot; -F &quot;url=https://github.com/baoyun-site&quot; -F &quot;code=baoyunsite&quot;
HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Tue, 14 Jul 2020 08:22:52 GMT
Status: 201 Created
Content-Type: text/html;charset=utf-8
Location: https://git.io/baoyunsite
Content-Length: 30
X-Xss-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.026588
X-Node: 7fa64432-805f-49cf-a4d4-6f19c50ae8f3
X-Revision: 392798d237fc1aa5cd55cada10d2945773e741a8
Strict-Transport-Security: max-age=31536000; includeSubDomains
Via: 1.1 vegur
</code></pre>
<p>https://github.com/baoyun-site<br>
绕过链接生成限制<br>
原理<br>
通过使用 Github Pages 中放置静态页面的功能，来进行跳转。</p>
<p>实现<br>
请查看 Github 仓库 renbaoshuo/git.io ，内含代码与说明。</p>
<p>版权声明<br>
本文作者： 宝硕<br>
本文链接： https://baoshuo.blog/post/oKnaKLcDb/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【gd-utils】 Docker快速搭建GoogleDrive转存Bot  ]]></title>
        <id>https://xiu.pw/S2lYVWimz/</id>
        <link href="https://xiu.pw/S2lYVWimz/">
        </link>
        <updated>2020-08-08T01:30:52.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://xiu.pw/post-images/1596850275326.gif" alt="" loading="lazy"></figure>
<p>如果只能搭建bot推荐使用docker版</p>
<p>准备：<br>
1.SA配置文件（xxx.json）此步骤忽略参考（http://blog.jialezi.net/?post=153 ）<br>
2.tgbot的api t.me/BotFather 创建即可见<br>
3.一个可解析的域名<br>
4.GoogleDrive文件夹的id<br>
5.docker镜像<br>
（我自用的小修改版 https://hub.docker.com/r/jialezi/gd-utils）<br>
原版：https://github.com/gdtool/gd-utils-docker/</p>
<p>搭建<br>
示例：<br>
域名为abc.com<br>
GoogleDrive文件夹的id为1hhDZw2SKjNeuwWroHSenoY-TXiFZyDoM<br>
bot api为13xxxx2380:AAGDPL_2-LPIA0iQ6RxxxxM9bBOFjtErFGE</p>
<p>提前解析abc.com到你的服务器ip（用于申请ssl）<br>
然后</p>
<p>1.下载配置文件，按要求修改里面的参数</p>
<pre><code>`wget https://raw.githubusercontent.com/gdtool/gd-utils-docker/master/config.example.js -O config.js`
##用SA的修改以下三项即可，其他按需修改
const DEFAULT_TARGET = '' ,// 必填，拷贝默认目的地ID，如果不指定target，则会复制到此处，建议填写团队盘ID
tg_token: '', // 你的 telegram robot 的 token，获取方法参见 https://core.telegram.org/bots#6-botfather
tg_whitelist: [''] // 你的tg username(t.me/username)，bot只会执行这个列表里的用户所发送的指令
</code></pre>
<p>2.创建sa文件夹上传sa文件到sa文件夹（你也可以运行后再用web端的filebrowser上传）</p>
<p>3.运行</p>
<pre><code>docker run --restart=always -idt -e USERPWD=123qwe -p 443:443 -p 80:80 -e Domain=abc.com -v ${PWD}/sa:/gd-utils/sa -v ${PWD}/config.js:/gd-utils/config.js --name gd-utils jialezi/gd-utils
</code></pre>
<p>申请ssl需要80端口<br>
USERPWD为shellinabox密码 || Domain=abc.com 为自己域名，要提前解析，由caddy自动申请ssl</p>
<p>4.对接telegram bot</p>
<pre><code>curl -F &quot;url=[YOUR_WEBSITE]/api/gdurl/tgbot&quot; 'https://api.telegram.org/bot[YOUR_BOT_TOKEN]/setWebhook'
</code></pre>
<p>例如：</p>
<pre><code>curl -F &quot;url=https://abc.com/api/gdurl/tgbot&quot; 'https://api.telegram.org/bot1394xxx380:AAGDPL_2-LPIA0iQ6xxxxM9bBOFjtErFGE/setWebhook'
</code></pre>
<p>返回true ok</p>
<p>访问:</p>
<p>1）https://abc.com #gd-utils地址</p>
<p>2）https://abc.com/shell #shellinabox地址，使用root需要先使用gd用登录，再切换root<br>
账号gd，密码自设 USERPWD=123qwe || su root切换到root 密码自设 USERPWD=123qwe</p>
<p>3）https://abc.com/file #filebrowser 账号密码admin</p>
<p>如果觉得不够快，可以去使用fclone，超级暴力的项目</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[bbr/bbrplus/bbr2/锐速内核安装脚本更新测试版]]></title>
        <id>https://xiu.pw/yzEb8qOIh/</id>
        <link href="https://xiu.pw/yzEb8qOIh/">
        </link>
        <updated>2020-08-08T01:26:13.000Z</updated>
        <content type="html"><![CDATA[<p>方便国内使用<br>
不卸载内核<br>
<code>wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</code><br>
或<br>
<code>wget -N &quot;https://github.000060000.xyz/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</code><br>
卸载内核<br>
<code>wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code><br>
或<br>
<code>wget -N &quot;https://github.000060000.xyz/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code></p>
<p>bbr内核更新为5.5/5.4</p>
<p>bbrplus降级到4.14.129 安装方法和安装的内核均和原作者一致 彻底甩锅<br>
维持原来的支持版本 不再支持c6,c8;debian和ubuntu各版本安装问题和我无关</p>
<p>不支持32位系统<br>
锐速内核稍微更新</p>
<p>去掉魔改版 增加xanmod 5.5.1版本<br>
xanmod 只添加了centos7,8 debian9,10</p>
<p>5.5内核支持cake队列 5.4未测试</p>
<p>测试版本，建议先用不卸载内核版本测试，然后再用正常版本<br>
不卸载内核表示不会去卸载现有的内核</p>
<p>测试分支<br>
https://github.com/ylx2016/Linux-NetSpeed/tree/2020.2.3<br>
https://github.com/ylx2016/Linux-NetSpeed/releases</p>
<p>原作者<br>
https://github.com/cx9208/Linux-NetSpeed<br>
https://github.com/chiakge/Linux-NetSpeed</p>
<figure data-type="image" tabindex="1"><img src="https://xiu.pw/post-images/1596850093008.webp" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tg邀请码机器人源码 自动发码 数量统计 无码提醒]]></title>
        <id>https://xiu.pw/NbSNPnGXz/</id>
        <link href="https://xiu.pw/NbSNPnGXz/">
        </link>
        <updated>2020-08-08T01:12:06.000Z</updated>
        <content type="html"><![CDATA[<p>简介<br>
因为论坛和部分网站需要发送邀请码邀请注册，人工发码又太慢，于是想到tg机器人发码，但是找了很多项目都没有找到类似的开源项目，偶然间看到了teelebot开源的tgAPi框架 于是参考着示例 ，用我学了半个月的半吊子python 写出了这个暂时能用不会报错的telegram邀请码机器人</p>
<p>目前已经到我理想状态，短期内不会进行功能更新，学习比较重要。</p>
<p>增加功能<br>
1.邀请码自动发码模块 并且限制领取数量（邀请码添加在invite_code目录下的code.txt 一行一个） 用户信息存储在usertext.txt文件内</p>
<p>2.邀请码数量统计，如果邀请码用完自动给管理员发消息（需自行修改len_invite.py里面的发送id）</p>
<p>3.补码模块已经添加 目前并不是很理想的状态但是可以用使用方法</p>
<p>/add_code邀请码<br>
邀请码<br>
注意：一行一个注意换行</p>
<p>4.删除用户信息模块，删除后用户可以再次获取邀请码指令/del用户id目前只能删除单个用户</p>
<p>5.mps的自动补码模块 请在/plugins/updatacode/updatacode.py文件内填写网站登录信息，目前只会抓取两页邀请码，需要手动更新，后期会添加自动执行进去。</p>
<p>开发计划<br>
1.增加管理员添加邀请码模块</p>
<p>2.多类邀请码模块支持</p>
<p>3.统计需改成json数据 目前统计方式过于简易(已完成)</p>
<p>4.管理员补码：暂定计划1，发送补码指令并跟随邀请码，格式为一行一个，然后剔除指令文本，后使用write写入code.txt文件中。 计划2:用户发送指令后开始监听，将用户发送的后续文本写入文件中，需发送特定指令来结束输入</p>
<p>环境要求<br>
Python版本<br>
teelebot 只支持 Python3.x，不支持Python2.x。</p>
<p>使用<br>
一、源码运行<br>
1.克隆或点击下载本项目到本地，保证本机安装有Python3.x版本和包requests（删除了多余模块不需要了）；</p>
<p>2.config.cfg 配置文件</p>
<p>配置文件格式:</p>
<p>[config]<br>
key=your key<br>
root=your user id<br>
debug=False<br>
timeout=60<br>
plugin_dir=your plugin dir   //[Optional]<br>
Linux<br>
在 /root 目录下创建文件夹 .teelebot ,并在其内新建配置文件 config.cfg ,按照上面的格式填写配置文件</p>
<p>Windows<br>
在 C:\Users&lt;username&gt; 目录下创建文件夹 .teelebot ,并在其内新建配置文件 config.cfg ,按照上面的格式填写配置文件</p>
<p>指定配置文件<br>
Linux 和 Windows 都可在命令行通过参数手动指定配置文件路径，命令格式：</p>
<p>python -m teelebot -c/-C <configure file path><br>
路径必须为绝对路径。</p>
<p>3.运行</p>
<p>终端下进入teelebot文件夹所在目录。</p>
<p>对于使用程序配置文件默认路径的：输入python -m teelebot 回车,正常情况下你应该能看见屏幕提示机器人开始运行。<br>
对于命令行手动指定配置文件路径的：输入python -m teelebot -c/-C <configure file path> 回车,正常情况下你应该能看见屏幕提示机器人开始运行。<br>
tg邀请码机器人源码 自动发码 数量统计 无码提醒</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为Onedrive套上CDN加速下载]]></title>
        <id>https://xiu.pw/G7OkD-Cag/</id>
        <link href="https://xiu.pw/G7OkD-Cag/">
        </link>
        <updated>2020-08-08T01:10:25.000Z</updated>
        <content type="html"><![CDATA[<p>首先推荐两种程序</p>
<p>1.php的OneIndex修改版</p>
<p>2.萌咖的GO版OneList</p>
<p>这两种程序都能够直接将sharepoint域名替换为你反代的域名或者是CDN域名</p>
<p>程序地址：</p>
<p>OneIndex：https://github.com/caippx/oneindex-j</p>
<p>OneList：https://github.com/MoeClub/OneList/tree/master/Rewrite</p>
<p>使用方法<br>
OneList：</p>
<p>这个就很简单了，根据github中的教程 配置好配置文件之后</p>
<p>在运行的时候使用</p>
<p>OneList -bind 0.0.0.0 -port 80 -P &quot;xxxxx-my.sharepoint.com|domain.com&quot;<br>
即可将你的sharepoint域名替换成domain.con</p>
<p>OneIndex：</p>
<p>这个版本是经过我修改的版本，在安装完成之后 直接在后台设置里面可以看到替换sharepoint域名的选项</p>
<p>填上即可 如果留空 则不使用该功能</p>
<p>注：sharepoint域名为你在网页版onedrive首页时的那个域名xxxxx-my.sharepoint.com</p>
]]></content>
    </entry>
</feed>